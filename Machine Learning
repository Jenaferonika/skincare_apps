{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jenaferonika/skincare_apps/blob/main/Machine%20Learning\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dLsc8fM5mAAW"
      },
      "source": [
        "### Menyiapkan semua library yang dibutuhkan"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "dZvksdORmAAX"
      },
      "outputs": [],
      "source": [
        "# import packages\n",
        "import csv\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import pickle\n",
        "import re\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\n",
        "from tensorflow.keras.activations import linear, relu, sigmoid\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras import optimizers, losses\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras import layers, models, optimizers\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vWeBh9owmAAY"
      },
      "source": [
        "### Data Wrangling"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3t38xYBImAAY"
      },
      "source": [
        "#### Gathering Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "RV2uAw8smAAZ",
        "outputId": "eed34952-efc7-4479-a74c-91ca0beb79e6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  ingredient_name     rating  \\\n",
              "0                         3-O Ethyl Ascorbic Acid       BEST   \n",
              "1                                            Acai       BEST   \n",
              "2                           Acerola Fruit Extract       BEST   \n",
              "3                            Acetyl Carnitine HCL       BEST   \n",
              "4                  Acetyl Dipeptide-1 Cetyl Ester       BEST   \n",
              "...                                           ...        ...   \n",
              "26082                      Zostera Marina Extract  NOT RATED   \n",
              "26083     Zygophyllum Qatarense Leaf/Stem Extract  NOT RATED   \n",
              "26084  Zygosaccharomyces Microellipsoides Ferment  NOT RATED   \n",
              "26085                   Zymomonas Ferment Extract  NOT RATED   \n",
              "26086                  Zymomonas Ferment Filtrate  NOT RATED   \n",
              "\n",
              "                                               functions  \\\n",
              "0      This potent antioxidant is a highly stable for...   \n",
              "1      Pronounced \"ah-sigh-ee\", this small berry has ...   \n",
              "2      This fruit extract is a potent source of antio...   \n",
              "3                           Functions as an antioxidant.   \n",
              "4      A lab-made skin-firming peptide formed from a ...   \n",
              "...                                                  ...   \n",
              "26082  Functions: Skin Conditioning. We have not yet ...   \n",
              "26083  Functions: Antioxidant. We have not yet rated ...   \n",
              "26084  Functions: Humectant. We have not yet rated th...   \n",
              "26085  Functions: Humectant, Skin Conditioning. We ha...   \n",
              "26086  Functions: Humectant, Skin Conditioning. We ha...   \n",
              "\n",
              "                                                    link  \n",
              "0      https://www.paulaschoice.com/ingredient-dictio...  \n",
              "1      https://www.paulaschoice.com/ingredient-dictio...  \n",
              "2      https://www.paulaschoice.com/ingredient-dictio...  \n",
              "3      https://www.paulaschoice.com/ingredient-dictio...  \n",
              "4      https://www.paulaschoice.com/ingredient-dictio...  \n",
              "...                                                  ...  \n",
              "26082                                                NaN  \n",
              "26083                                                NaN  \n",
              "26084                                                NaN  \n",
              "26085                                                NaN  \n",
              "26086                                                NaN  \n",
              "\n",
              "[26087 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ad35deca-b2ed-445c-a770-b6acb922169b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "      <th>link</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3-O Ethyl Ascorbic Acid</td>\n",
              "      <td>BEST</td>\n",
              "      <td>This potent antioxidant is a highly stable for...</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Acai</td>\n",
              "      <td>BEST</td>\n",
              "      <td>Pronounced \"ah-sigh-ee\", this small berry has ...</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Acerola Fruit Extract</td>\n",
              "      <td>BEST</td>\n",
              "      <td>This fruit extract is a potent source of antio...</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Acetyl Carnitine HCL</td>\n",
              "      <td>BEST</td>\n",
              "      <td>Functions as an antioxidant.</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Acetyl Dipeptide-1 Cetyl Ester</td>\n",
              "      <td>BEST</td>\n",
              "      <td>A lab-made skin-firming peptide formed from a ...</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26082</th>\n",
              "      <td>Zostera Marina Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26083</th>\n",
              "      <td>Zygophyllum Qatarense Leaf/Stem Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Antioxidant. We have not yet rated ...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26084</th>\n",
              "      <td>Zygosaccharomyces Microellipsoides Ferment</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant. We have not yet rated th...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26085</th>\n",
              "      <td>Zymomonas Ferment Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26086</th>\n",
              "      <td>Zymomonas Ferment Filtrate</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>26087 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad35deca-b2ed-445c-a770-b6acb922169b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ad35deca-b2ed-445c-a770-b6acb922169b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ad35deca-b2ed-445c-a770-b6acb922169b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-efef7d25-c140-4ebf-b5ba-6cee600614e1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-efef7d25-c140-4ebf-b5ba-6cee600614e1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-efef7d25-c140-4ebf-b5ba-6cee600614e1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9713c701-9cc8-42c3-bd43-a8284514d2a2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dataset1_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9713c701-9cc8-42c3-bd43-a8284514d2a2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dataset1_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset1_df",
              "summary": "{\n  \"name\": \"dataset1_df\",\n  \"rows\": 26087,\n  \"fields\": [\n    {\n      \"column\": \"ingredient_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26084,\n        \"samples\": [\n          \"PCA Dimethicone\",\n          \"2,3,6-Trimethylcyclohexylmethyl Acetate\",\n          \"Acacia Catechu Gum\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"BEST\",\n          \"GOOD\",\n          \"NOT RATED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"functions\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4055,\n        \"samples\": [\n          \"This is the Latin name for the flowering plant from which hazelnuts are harvested.\",\n          \"A species of dill that may be used as a skin care extract.\",\n          \"A plant extract that is a natural source of saponin.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"link\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2412,\n        \"samples\": [\n          \"https://www.paulaschoice.com/ingredient-dictionary/ingredient-red-21.html?csortb1=ingredientNotRated&csortb2=ingredientRating&csortb3=name&csortd1=1&csortd2=2&csortd3=1&sz=2000&fdid=ingredients&start=0\",\n          \"https://www.paulaschoice.com/ingredient-dictionary/ingredient-citrus-aurantium.html?csortb1=ingredientNotRated&csortb2=ingredientRating&csortb3=name&csortd1=1&csortd2=2&csortd3=1&sz=2000&fdid=ingredients&start=2000\",\n          \"https://www.paulaschoice.com/ingredient-dictionary/ingredient-white-oak-bark-extract.html?csortb1=ingredientNotRated&csortb2=ingredientRating&csortb3=name&csortd1=1&csortd2=2&csortd3=1&sz=2000&fdid=ingredients&start=2000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "# import data\n",
        "dataset1_df = pd.read_csv('/content/sample_data/dataset1.csv')\n",
        "dataset1_df #show data below"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "dtfiHtSvmAAZ",
        "outputId": "f3306b84-2e2e-43fc-b014-e1411975875e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  ingredient_name     rating  \\\n",
              "0                         3-O Ethyl Ascorbic Acid       BEST   \n",
              "1                                            Acai       BEST   \n",
              "2                           Acerola Fruit Extract       BEST   \n",
              "3                            Acetyl Carnitine HCL       BEST   \n",
              "4                  Acetyl Dipeptide-1 Cetyl Ester       BEST   \n",
              "...                                           ...        ...   \n",
              "26069                      Zostera Marina Extract  NOT RATED   \n",
              "26070     Zygophyllum Qatarense Leaf/Stem Extract  NOT RATED   \n",
              "26071  Zygosaccharomyces Microellipsoides Ferment  NOT RATED   \n",
              "26072                   Zymomonas Ferment Extract  NOT RATED   \n",
              "26073                  Zymomonas Ferment Filtrate  NOT RATED   \n",
              "\n",
              "                                               functions  \\\n",
              "0      This potent antioxidant is a highly stable for...   \n",
              "1      Pronounced \"ah-sigh-ee\", this small berry has ...   \n",
              "2      This fruit extract is a potent source of antio...   \n",
              "3                           Functions as an antioxidant.   \n",
              "4      A lab-made skin-firming peptide formed from a ...   \n",
              "...                                                  ...   \n",
              "26069  Functions: Skin Conditioning. We have not yet ...   \n",
              "26070  Functions: Antioxidant. We have not yet rated ...   \n",
              "26071  Functions: Humectant. We have not yet rated th...   \n",
              "26072  Functions: Humectant, Skin Conditioning. We ha...   \n",
              "26073  Functions: Humectant, Skin Conditioning. We ha...   \n",
              "\n",
              "                                                    link  \\\n",
              "0      https://www.paulaschoice.com/ingredient-dictio...   \n",
              "1      https://www.paulaschoice.com/ingredient-dictio...   \n",
              "2      https://www.paulaschoice.com/ingredient-dictio...   \n",
              "3      https://www.paulaschoice.com/ingredient-dictio...   \n",
              "4      https://www.paulaschoice.com/ingredient-dictio...   \n",
              "...                                                  ...   \n",
              "26069                                                NaN   \n",
              "26070                                                NaN   \n",
              "26071                                                NaN   \n",
              "26072                                                NaN   \n",
              "26073                                                NaN   \n",
              "\n",
              "                                            benefits  \\\n",
              "0      Anti-Aging, Evens Skin Tone, Dark Spot Fading   \n",
              "1                               Anti-Aging, Soothing   \n",
              "2                                         Anti-Aging   \n",
              "3                                          Hydration   \n",
              "4                                         Anti-Aging   \n",
              "...                                              ...   \n",
              "26069                                            NaN   \n",
              "26070                                            NaN   \n",
              "26071                                            NaN   \n",
              "26072                                            NaN   \n",
              "26073                                            NaN   \n",
              "\n",
              "                        categories  \\\n",
              "0                      Antioxidant   \n",
              "1      Antioxidant, Plant Extracts   \n",
              "2      Antioxidant, Plant Extracts   \n",
              "3                      Antioxidant   \n",
              "4                         Peptides   \n",
              "...                            ...   \n",
              "26069                          NaN   \n",
              "26070                          NaN   \n",
              "26071                          NaN   \n",
              "26072                          NaN   \n",
              "26073                          NaN   \n",
              "\n",
              "                                                  glance  \\\n",
              "0      A more stable derivative of pure vitamin C (as...   \n",
              "1                                                    NaN   \n",
              "2                                                    NaN   \n",
              "3                                                    NaN   \n",
              "4      Lab-made anti-aging peptide that promotes firm...   \n",
              "...                                                  ...   \n",
              "26069                                                NaN   \n",
              "26070                                                NaN   \n",
              "26071                                                NaN   \n",
              "26072                                                NaN   \n",
              "26073                                                NaN   \n",
              "\n",
              "                                              references  \\\n",
              "0      Free Radical Biology and Medicine,  September ...   \n",
              "1                                                    NaN   \n",
              "2      Journal of AOAC International,  September 2018...   \n",
              "3      Supercharged Hydration;;How Hyaluronic Acid Be...   \n",
              "4      Pharmaceuticals,  July 2021,  pages 1–22;;Jour...   \n",
              "...                                                  ...   \n",
              "26069                                                NaN   \n",
              "26070                                                NaN   \n",
              "26071                                                NaN   \n",
              "26072                                                NaN   \n",
              "26073                                                NaN   \n",
              "\n",
              "                                                     all  \\\n",
              "0      INGREDIENT DICTIONARY/SEARCH RESULTS\\n3-O Ethy...   \n",
              "1      INGREDIENT DICTIONARY/SEARCH RESULTS\\nAcai\\nRa...   \n",
              "2      INGREDIENT DICTIONARY/SEARCH RESULTS\\nAcerola ...   \n",
              "3      INGREDIENT DICTIONARY/SEARCH RESULTS\\nAcetyl C...   \n",
              "4      INGREDIENT DICTIONARY/SEARCH RESULTS\\nAcetyl D...   \n",
              "...                                                  ...   \n",
              "26069                                                NaN   \n",
              "26070                                                NaN   \n",
              "26071                                                NaN   \n",
              "26072                                                NaN   \n",
              "26073                                                NaN   \n",
              "\n",
              "                                             description  \\\n",
              "0      3-O ethyl ascorbic acid is a stable, water- an...   \n",
              "1      Acai (pronounced “ah-sigh-ee”) is a small berr...   \n",
              "2      Acerola fruit extract (also known as _Malpighi...   \n",
              "3                                                    NaN   \n",
              "4      Acetyl dipeptide-1 cetyl ester is a lab-engine...   \n",
              "...                                                  ...   \n",
              "26069                                                NaN   \n",
              "26070                                                NaN   \n",
              "26071                                                NaN   \n",
              "26072                                                NaN   \n",
              "26073                                                NaN   \n",
              "\n",
              "                                           combined_text  \n",
              "0      3-O ethyl ascorbic acid is a stable, water- an...  \n",
              "1      Acai (pronounced “ah-sigh-ee”) is a small berr...  \n",
              "2      Acerola fruit extract (also known as _Malpighi...  \n",
              "3                           Functions as an antioxidant.  \n",
              "4      Acetyl dipeptide-1 cetyl ester is a lab-engine...  \n",
              "...                                                  ...  \n",
              "26069   Functions: Skin Conditioning. We have not yet...  \n",
              "26070   Functions: Antioxidant. We have not yet rated...  \n",
              "26071   Functions: Humectant. We have not yet rated t...  \n",
              "26072   Functions: Humectant, Skin Conditioning. We h...  \n",
              "26073   Functions: Humectant, Skin Conditioning. We h...  \n",
              "\n",
              "[26074 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-968b7019-ea3c-4b7f-9e15-5d9e229e5dfb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "      <th>link</th>\n",
              "      <th>benefits</th>\n",
              "      <th>categories</th>\n",
              "      <th>glance</th>\n",
              "      <th>references</th>\n",
              "      <th>all</th>\n",
              "      <th>description</th>\n",
              "      <th>combined_text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3-O Ethyl Ascorbic Acid</td>\n",
              "      <td>BEST</td>\n",
              "      <td>This potent antioxidant is a highly stable for...</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "      <td>Anti-Aging, Evens Skin Tone, Dark Spot Fading</td>\n",
              "      <td>Antioxidant</td>\n",
              "      <td>A more stable derivative of pure vitamin C (as...</td>\n",
              "      <td>Free Radical Biology and Medicine,  September ...</td>\n",
              "      <td>INGREDIENT DICTIONARY/SEARCH RESULTS\\n3-O Ethy...</td>\n",
              "      <td>3-O ethyl ascorbic acid is a stable, water- an...</td>\n",
              "      <td>3-O ethyl ascorbic acid is a stable, water- an...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Acai</td>\n",
              "      <td>BEST</td>\n",
              "      <td>Pronounced \"ah-sigh-ee\", this small berry has ...</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "      <td>Anti-Aging, Soothing</td>\n",
              "      <td>Antioxidant, Plant Extracts</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>INGREDIENT DICTIONARY/SEARCH RESULTS\\nAcai\\nRa...</td>\n",
              "      <td>Acai (pronounced “ah-sigh-ee”) is a small berr...</td>\n",
              "      <td>Acai (pronounced “ah-sigh-ee”) is a small berr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Acerola Fruit Extract</td>\n",
              "      <td>BEST</td>\n",
              "      <td>This fruit extract is a potent source of antio...</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "      <td>Anti-Aging</td>\n",
              "      <td>Antioxidant, Plant Extracts</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Journal of AOAC International,  September 2018...</td>\n",
              "      <td>INGREDIENT DICTIONARY/SEARCH RESULTS\\nAcerola ...</td>\n",
              "      <td>Acerola fruit extract (also known as _Malpighi...</td>\n",
              "      <td>Acerola fruit extract (also known as _Malpighi...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Acetyl Carnitine HCL</td>\n",
              "      <td>BEST</td>\n",
              "      <td>Functions as an antioxidant.</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "      <td>Hydration</td>\n",
              "      <td>Antioxidant</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Supercharged Hydration;;How Hyaluronic Acid Be...</td>\n",
              "      <td>INGREDIENT DICTIONARY/SEARCH RESULTS\\nAcetyl C...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Functions as an antioxidant.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Acetyl Dipeptide-1 Cetyl Ester</td>\n",
              "      <td>BEST</td>\n",
              "      <td>A lab-made skin-firming peptide formed from a ...</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "      <td>Anti-Aging</td>\n",
              "      <td>Peptides</td>\n",
              "      <td>Lab-made anti-aging peptide that promotes firm...</td>\n",
              "      <td>Pharmaceuticals,  July 2021,  pages 1–22;;Jour...</td>\n",
              "      <td>INGREDIENT DICTIONARY/SEARCH RESULTS\\nAcetyl D...</td>\n",
              "      <td>Acetyl dipeptide-1 cetyl ester is a lab-engine...</td>\n",
              "      <td>Acetyl dipeptide-1 cetyl ester is a lab-engine...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26069</th>\n",
              "      <td>Zostera Marina Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26070</th>\n",
              "      <td>Zygophyllum Qatarense Leaf/Stem Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Antioxidant. We have not yet rated ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Functions: Antioxidant. We have not yet rated...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26071</th>\n",
              "      <td>Zygosaccharomyces Microellipsoides Ferment</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant. We have not yet rated th...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Functions: Humectant. We have not yet rated t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26072</th>\n",
              "      <td>Zymomonas Ferment Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We h...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26073</th>\n",
              "      <td>Zymomonas Ferment Filtrate</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We h...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>26074 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-968b7019-ea3c-4b7f-9e15-5d9e229e5dfb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-968b7019-ea3c-4b7f-9e15-5d9e229e5dfb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-968b7019-ea3c-4b7f-9e15-5d9e229e5dfb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-929faa73-dbeb-49bb-990f-71aeaa19f2af\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-929faa73-dbeb-49bb-990f-71aeaa19f2af')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-929faa73-dbeb-49bb-990f-71aeaa19f2af button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_daa453e9-76b4-4eb8-800c-d66d58d59683\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dataset2_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_daa453e9-76b4-4eb8-800c-d66d58d59683 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dataset2_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset2_df",
              "summary": "{\n  \"name\": \"dataset2_df\",\n  \"rows\": 26074,\n  \"fields\": [\n    {\n      \"column\": \"ingredient_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26074,\n        \"samples\": [\n          \"PEG/PPG-18/18 Dimethicone\",\n          \"2,4,6-Trimethyl-3-Cyclohexenecarbaldehyde\",\n          \"Acacia Dealbata Flower Wax\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"BEST\",\n          \"GOOD\",\n          \"NOT RATED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"functions\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4044,\n        \"samples\": [\n          \"Functions: Anticaking, Film Forming. We have not yet rated this ingredient because we have not had a chance to review the research on it.\",\n          \"Also known as green tea oil, this oil is a rich source of antioxidants and fatty acids.\",\n          \"Fragrance chemical that occurs naturally in some plant ingredients.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"link\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2399,\n        \"samples\": [\n          \"https://www.paulaschoice.com/ingredient-dictionary/ingredient-sodium-metabisulfite.html?csortb1=ingredientNotRated&csortb2=ingredientRating&csortb3=name&csortd1=1&csortd2=2&csortd3=1&sz=2000&fdid=ingredients&start=2000\",\n          \"https://www.paulaschoice.com/ingredient-dictionary/ingredient-nymphaea-alba-root-extract.html?csortb1=ingredientNotRated&csortb2=ingredientRating&csortb3=name&csortd1=1&csortd2=2&csortd3=1&sz=2000&fdid=ingredients&start=0\",\n          \"https://www.paulaschoice.com/ingredient-dictionary/ingredient-amodimethicone.html?csortb1=ingredientNotRated&csortb2=ingredientRating&csortb3=name&csortd1=1&csortd2=2&csortd3=1&sz=2000&fdid=ingredients&start=0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"benefits\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 90,\n        \"samples\": [\n          \"Anti-Acne, Anti-Aging, Evens Skin Tone\",\n          \"Anti-Aging, Evens Skin Tone, Soothing\",\n          \"Anti-Acne, Soothing\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"categories\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 392,\n        \"samples\": [\n          \"Emollient, Occlusive/Opacifying Agent, Plant Extracts\",\n          \"Humectant, pH Adjuster/Stabilizer, Chelating Agent\",\n          \"Solvent, Polymer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"glance\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 927,\n        \"samples\": [\n          \"The gentlest alpha hydroxy acid.;;Excellent choice for sensitive skin.;;Helps firm and fade post-breakout marks;;Light sensitive so requires opaque packaging.;;May be derived from almonds or synthetic.\",\n          \"Works as a mild cleansing agent and emulsifier;;Helps control the thickness of liquids;;Keeps water and oil phases of a formula from separating;;May be plant- or animal-derived or synthetic\",\n          \"Stable form of vitamin C combined with starch-derived glucose;;Maintains many of the same benefits as pure vitamin C;;Easily penetrates skin;;Brightening and tone-improving benefits enhanced by niacinamide;;Excellent antioxidant to improve skin\\u2019s environmental defenses\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"references\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 367,\n        \"samples\": [\n          \"Microorganisms,  July 2016,  pages 1-23;;Microbial Ecology,  August 2013,  pages 972-985;;Cosmetics & Toiletries,  July 2013,  ePublication;;International Journal of Cosmetic Science,  December 2009,  page 480;;Journal of Inflammation (London),  March 2009,  ePublication;;Journal of Industrial Microbiology Biotechnology,  August 2003,  pages 495-499;;Journal of Natural Products,  January 2001,  pages 100\\u2013102;;Life Sciences,  May 22,  1998,  pages 401\\u2013407\",\n          \"International Journal of Toxicology,  August 2022,  pages 57S-75S\",\n          \"International Journal of Medicinal Mushrooms,  Volume 24,  Issue 4,  2022,  pages 1\\u201313;;Molecules,  January 2022,  pages 1\\u201314;;Critical Reviews in Food Science and Nutrition,  March 2021,  ePublication;;International Journal of Cosmetic Science,  August 2017,  pages 379\\u2013385;;Frontiers in Physiology,  June 2017,  ePublication\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"all\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2382,\n        \"samples\": [\n          \"INGREDIENT DICTIONARY/SEARCH RESULTS\\nBalsam Peru\\nRating: WORST\\nCategories: Plant Extracts, Irritant, Film-Forming Agent\\nBalsam Peru Description\\n\\nFatty resin that when applied topically can cause sensitivity. It also has the potential to cause phototoxicity. Balsam peru is also a standard used in patch tests for skin sensitivity due to its high incidence of causing reactions. For more information, please see the Copaifera Officinalis entry.\\n\\nSee: Copaifera Officinalis\\nWritten by: Paula's Choice Research & Education Team\\nSHOP ALL INGREDIENTS\\nBACK TO INGREDIENT DICTIONARY\\nBalsam Peru References\\nJournal of the American Academy of Dermatology, December 2001, issue 6, pages 836-839\\nPeer-reviewed, substantiated scientific research is used to assess ingredients in this dictionary. Regulations regarding usage constraints, permitted concentration levels and availability vary by country and region.\",\n          \"INGREDIENT DICTIONARY/SEARCH RESULTS\\nIsostearic Acid\\nRating: GOOD\\nCategories: Cleansing Agent, Texture Enhancer\\nIsostearic Acid Description\\n\\nFatty acid used as a binding agent and texture enhancer.\\n\\nWritten by: Paula's Choice Research & Education Team\\nSHOP ALL INGREDIENTS\\nBACK TO INGREDIENT DICTIONARY\\nPeer-reviewed, substantiated scientific research is used to assess ingredients in this dictionary. Regulations regarding usage constraints, permitted concentration levels and availability vary by country and region.\",\n          \"INGREDIENT DICTIONARY/SEARCH RESULTS\\nEthylene/Propylene/Styrene/Copolymer\\nRating: GOOD\\nCategories: Polymer, Texture Enhancer\\nEthylene/Propylene/Styrene/Copolymer at a Glance\\nTexture enhancing polymer\\nCreates gel textures in oil-based formulas\\nCan help to create occlusive barriers\\nOften used in conjunction with butylene/ethylene/styrene copolymer\\nEthylene/Propylene/Styrene/Copolymer Description\\n\\nEthylene/propylene/styrene copolymer is a synthetic polymer used in skin care to help thicken and create gel textures in oil-based formulas. This polymer, or compound with a high molecular weight made up of smaller parts, is created when the hydrocarbons ethylene, propylene and styrene are joined together and then terminated through a process called hydrogenation.\\n\\nDue to its status as a gelling agent, this copolymer improves the sensorial experience of formulas and can help to create an occlusive barrier that prevents transepidermal water loss, ultimately helping hydrate skin. Ethylene/propylene/styrene copolymer is often used alongside butylene/ethylene/styrene copolymer.\\n\\nIn cosmetics, it\\u2019s often used in levels between 0.5-1.5%. It\\u2019s considered safe as used in cosmetics, with amounts double to three times what\\u2019s typically used being non-irritating to skin and only mildly irritating to eyes.\\n\\nSee: Polymer\\nWritten by: Shannon Steck\\nSHOP ALL INGREDIENTS\\nBACK TO INGREDIENT DICTIONARY\\nEthylene/Propylene/Styrene/Copolymer References\\nULProspector, Accessed March 2023, Webpage\\nInstitute for Environmental Studies, July 2014, Report\\nJournal of Dispersion Science and Technology, May 2012, ePublication\\nPeer-reviewed, substantiated scientific research is used to assess ingredients in this dictionary. Regulations regarding usage constraints, permitted concentration levels and availability vary by country and region.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2350,\n        \"samples\": [\n          \"Padina pavonica extract is an algae extract with potential antioxidant (anti-aging) and hydration benefits for skin.\\n\\nSee: Algae\",\n          \"Schizophyllan is a polysaccharide derived from the mycelium of Schyzophyllus commune mushroom, which are the thread-like parts from which they grow. Schizophyllan for skin care is made via fermentation of liquefied mushrooms which are then highly purified.\\n\\nResearch has shown that schizophyllan excels at reducing signs of irritated skin. It\\u2019s also a good antioxidant, capable of neutralizing damage from airborne pollutants such as smoke. Interestingly, vitamin C (as sodium ascorbyl phosphate) performed better in all-around antioxidant ability when compared to several polysaccharides, including schizophyllan; however, researchers noted its calming ability and suspect it also helps boost skin\\u2019s endogenous (naturally occurring) supply of antioxidants. Due to its strong water-binding (humectant) properties, schizophyllan is said to maintain skin\\u2019s hydration when under stress better than a similar amount of hyaluronic acid. Of note, more studies are needed to confirm this result. Its antioxidant ability and mild film-forming properties support a firmer look and feel for skin, making schizophyllan a mushroom derivative that can help reduce signs of aging. Usage levels of schizophyllan in skin care range from 0.1\\u20131%, with amounts between 0.1\\u20130.4% being quite effective at improving skin\\u2019s hydration, smoothness, and reducing signs of irritation.\\n\\nSee: Polymer, Polysaccharide, Beta-Glucan\",\n          \"Extract that has weak antioxidant properties. Tomatoes contain lycopene, which is a significant antioxidant, but it is more bioavailable from tomato paste than from fresh tomatoes. It can also be a potential skin sensitizer depending on what part of the tomato is used, but there is no way to know that from an ingredient label.\\n\\nSee: Lycopene, Tomato Extract\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"combined_text\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4245,\n        \"samples\": [\n          \" Functions: Astringent, Skin Conditioning, Skin Protecting. We have not yet rated this ingredient because we have not had a chance to review the research on it.\",\n          \"Guar hydroxypropyltrimonium chloride, one of the most widely used synthetic cationic polymers in the cosmetics industry, is an ingredient that\\u2019s often seen in conditioners and body washes. It functions as a conditioning agent for skin and hair, helps deposit active ingredients on skin and/or hair, and also provides anti-static properties without weighing hair down.\\n\\nSee: Polymer Functions as a synthetic conditioning agent for skin and hair and can play a role in depositing active ingredients.\",\n          \"Riboflavin, also known as vitamin B2, is lacking research backing the benefits of topical application of this ingredient for skin.\\n\\nSee: Vitamin B2 Also known as vitamin B2, research backing skin benefits for this ingredient are lacking.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "# import data\n",
        "dataset2_df = pd.read_csv('/content/sample_data/dataset2.csv')\n",
        "dataset2_df #show data below"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vXJ2r_TdmAAZ"
      },
      "source": [
        "### Assesing Data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KYwwphoYmAAa"
      },
      "source": [
        "#### Menilai Tabel dataset1_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 400
        },
        "id": "VgGCoW9ImAAa",
        "outputId": "f8dbef01-92a5-4dcf-c60d-9c0fc3bd2b95"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 26087 entries, 0 to 26086\n",
            "Data columns (total 4 columns):\n",
            " #   Column           Non-Null Count  Dtype \n",
            "---  ------           --------------  ----- \n",
            " 0   ingredient_name  26087 non-null  object\n",
            " 1   rating           26087 non-null  object\n",
            " 2   functions        26072 non-null  object\n",
            " 3   link             2412 non-null   object\n",
            "dtypes: object(4)\n",
            "memory usage: 815.3+ KB\n",
            "Jumlah Duplikasi:  0\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       ingredient_name     rating  \\\n",
              "count            26087      26087   \n",
              "unique           26084          6   \n",
              "top            Albumen  NOT RATED   \n",
              "freq                 2      23675   \n",
              "\n",
              "                                                functions  \\\n",
              "count                                               26072   \n",
              "unique                                               4055   \n",
              "top     Functions: Skin Conditioning. We have not yet ...   \n",
              "freq                                                 5642   \n",
              "\n",
              "                                                     link  \n",
              "count                                                2412  \n",
              "unique                                               2412  \n",
              "top     https://www.paulaschoice.com/ingredient-dictio...  \n",
              "freq                                                    1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-caa35229-2b70-4bd5-b499-0c30c65c1152\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "      <th>link</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>26087</td>\n",
              "      <td>26087</td>\n",
              "      <td>26072</td>\n",
              "      <td>2412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>26084</td>\n",
              "      <td>6</td>\n",
              "      <td>4055</td>\n",
              "      <td>2412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Albumen</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>2</td>\n",
              "      <td>23675</td>\n",
              "      <td>5642</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-caa35229-2b70-4bd5-b499-0c30c65c1152')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-caa35229-2b70-4bd5-b499-0c30c65c1152 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-caa35229-2b70-4bd5-b499-0c30c65c1152');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-adb5c479-0739-469f-87ce-cfd13d4c4495\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-adb5c479-0739-469f-87ce-cfd13d4c4495')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-adb5c479-0739-469f-87ce-cfd13d4c4495 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset1_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"ingredient_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          26084,\n          \"2\",\n          \"26087\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6,\n          \"23675\",\n          \"26087\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"functions\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4055,\n          \"5642\",\n          \"26072\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"link\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2412\",\n          \"https://www.paulaschoice.com/ingredient-dictionary/ingredient-3-o-ethyl-ascorbic-acid.html?csortb1=ingredientNotRated&csortb2=ingredientRating&csortb3=name&csortd1=1&csortd2=2&csortd3=1&sz=2000&fdid=ingredients&start=0\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "dataset1_df.info()\n",
        "dataset1_df.isna().sum()\n",
        "print(\"Jumlah Duplikasi: \", dataset1_df.duplicated().sum())\n",
        "dataset1_df.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EFZfMrZnmAAb"
      },
      "source": [
        "#### Menilai Tabel dataset2_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 629
        },
        "id": "hTOCbfnJmAAc",
        "outputId": "b988e22d-2777-45a5-fb02-8afb9fe5e6d4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 26074 entries, 0 to 26073\n",
            "Data columns (total 11 columns):\n",
            " #   Column           Non-Null Count  Dtype \n",
            "---  ------           --------------  ----- \n",
            " 0   ingredient_name  26074 non-null  object\n",
            " 1   rating           26074 non-null  object\n",
            " 2   functions        26060 non-null  object\n",
            " 3   link             2399 non-null   object\n",
            " 4   benefits         1524 non-null   object\n",
            " 5   categories       2350 non-null   object\n",
            " 6   glance           942 non-null    object\n",
            " 7   references       880 non-null    object\n",
            " 8   all              2382 non-null   object\n",
            " 9   description      2370 non-null   object\n",
            " 10  combined_text    26073 non-null  object\n",
            "dtypes: object(11)\n",
            "memory usage: 2.2+ MB\n",
            "Jumlah duplikasi:  0\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                ingredient_name     rating  \\\n",
              "count                     26074      26074   \n",
              "unique                    26074          6   \n",
              "top     3-O Ethyl Ascorbic Acid  NOT RATED   \n",
              "freq                          1      23675   \n",
              "\n",
              "                                                functions  \\\n",
              "count                                               26060   \n",
              "unique                                               4044   \n",
              "top     Functions: Skin Conditioning. We have not yet ...   \n",
              "freq                                                 5642   \n",
              "\n",
              "                                                     link   benefits  \\\n",
              "count                                                2399       1524   \n",
              "unique                                               2399         90   \n",
              "top     https://www.paulaschoice.com/ingredient-dictio...  Hydration   \n",
              "freq                                                    1        501   \n",
              "\n",
              "                         categories  \\\n",
              "count                          2350   \n",
              "unique                          392   \n",
              "top     Antioxidant, Plant Extracts   \n",
              "freq                            255   \n",
              "\n",
              "                                                   glance  \\\n",
              "count                                                 942   \n",
              "unique                                                927   \n",
              "top     Plant extract with proven skin-soothing, antio...   \n",
              "freq                                                    3   \n",
              "\n",
              "                                               references  \\\n",
              "count                                                 880   \n",
              "unique                                                367   \n",
              "top     Supercharged Hydration;;How Hyaluronic Acid Be...   \n",
              "freq                                                  241   \n",
              "\n",
              "                                                      all  \\\n",
              "count                                                2382   \n",
              "unique                                               2382   \n",
              "top     INGREDIENT DICTIONARY/SEARCH RESULTS\\n3-O Ethy...   \n",
              "freq                                                    1   \n",
              "\n",
              "                                              description  \\\n",
              "count                                                2370   \n",
              "unique                                               2350   \n",
              "top     Used as an emollient and thickening agent in c...   \n",
              "freq                                                    7   \n",
              "\n",
              "                                            combined_text  \n",
              "count                                               26073  \n",
              "unique                                               4245  \n",
              "top      Functions: Skin Conditioning. We have not yet...  \n",
              "freq                                                 5642  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-20f47986-e932-4a0e-94f8-0c8db6b1022d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "      <th>link</th>\n",
              "      <th>benefits</th>\n",
              "      <th>categories</th>\n",
              "      <th>glance</th>\n",
              "      <th>references</th>\n",
              "      <th>all</th>\n",
              "      <th>description</th>\n",
              "      <th>combined_text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>26074</td>\n",
              "      <td>26074</td>\n",
              "      <td>26060</td>\n",
              "      <td>2399</td>\n",
              "      <td>1524</td>\n",
              "      <td>2350</td>\n",
              "      <td>942</td>\n",
              "      <td>880</td>\n",
              "      <td>2382</td>\n",
              "      <td>2370</td>\n",
              "      <td>26073</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>26074</td>\n",
              "      <td>6</td>\n",
              "      <td>4044</td>\n",
              "      <td>2399</td>\n",
              "      <td>90</td>\n",
              "      <td>392</td>\n",
              "      <td>927</td>\n",
              "      <td>367</td>\n",
              "      <td>2382</td>\n",
              "      <td>2350</td>\n",
              "      <td>4245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>3-O Ethyl Ascorbic Acid</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "      <td>https://www.paulaschoice.com/ingredient-dictio...</td>\n",
              "      <td>Hydration</td>\n",
              "      <td>Antioxidant, Plant Extracts</td>\n",
              "      <td>Plant extract with proven skin-soothing, antio...</td>\n",
              "      <td>Supercharged Hydration;;How Hyaluronic Acid Be...</td>\n",
              "      <td>INGREDIENT DICTIONARY/SEARCH RESULTS\\n3-O Ethy...</td>\n",
              "      <td>Used as an emollient and thickening agent in c...</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1</td>\n",
              "      <td>23675</td>\n",
              "      <td>5642</td>\n",
              "      <td>1</td>\n",
              "      <td>501</td>\n",
              "      <td>255</td>\n",
              "      <td>3</td>\n",
              "      <td>241</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>5642</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20f47986-e932-4a0e-94f8-0c8db6b1022d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-20f47986-e932-4a0e-94f8-0c8db6b1022d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-20f47986-e932-4a0e-94f8-0c8db6b1022d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-935fe0b2-a864-4afd-85ea-51beab458dda\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-935fe0b2-a864-4afd-85ea-51beab458dda')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-935fe0b2-a864-4afd-85ea-51beab458dda button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset2_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"ingredient_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"26074\",\n          \"3-O Ethyl Ascorbic Acid\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6,\n          \"23675\",\n          \"26074\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"functions\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4044,\n          \"5642\",\n          \"26060\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"link\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2399\",\n          \"https://www.paulaschoice.com/ingredient-dictionary/ingredient-3-o-ethyl-ascorbic-acid.html?csortb1=ingredientNotRated&csortb2=ingredientRating&csortb3=name&csortd1=1&csortd2=2&csortd3=1&sz=2000&fdid=ingredients&start=0\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"benefits\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          90,\n          \"501\",\n          \"1524\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"categories\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          392,\n          \"255\",\n          \"2350\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"glance\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          927,\n          \"3\",\n          \"942\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"references\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          367,\n          \"241\",\n          \"880\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"all\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2382\",\n          \"INGREDIENT DICTIONARY/SEARCH RESULTS\\n3-O Ethyl Ascorbic Acid\\nRating: BEST\\nBenefits: Anti-Aging, Evens Skin Tone, Dark Spot Fading\\nCategories: Antioxidant\\n3-O Ethyl Ascorbic Acid at a Glance\\nA more stable derivative of pure vitamin C (ascorbic acid)\\nHas water- and oil-soluble properties\\nCapable of fading hyperpigmentation\\nOffers anti-aging benefits on par with vitamin C\\n3-O Ethyl Ascorbic Acid Description\\n\\n3-O ethyl ascorbic acid is a stable, water- and oil-soluble derivative of pure vitamin C (ascorbic acid) that offers all of the primary benefits vitamin C is known for, such as brightening, wrinkle reduction, visible firming, fading hyperpigmentation to restore a more even skin tone and offsetting numerous triggers of environmental damage.\\n\\nAs a modified and more stable version of pure vitamin C, 3-O ethyl ascorbic acid must be converted to vitamin C within skin by sodium-dependent proteins. This process within skin\\u2019s surface layers helps ensure skin benefits.\\n\\nDue to the conversion to pure vitamin C being a slower process, 3-O ethyl ascorbic acid is considered a more tolerable form of vitamin C. However, like pure vitamin C, the ethyl form requires an acidic pH range (4\\u20135.5) for optimum stability. This pH range is higher than what ascorbic acid needs for ideal stability, making 3-O ethyl ascorbic acid an intriguing alternative if your skin hasn\\u2019t been able to tolerate higher-strength (10% and up) vitamin C (ascorbic acid) products.\\n\\nResearch has shown which non-irritating ingredients aid the penetration of this ingredient into skin\\u2019s surface, and they include pentylene glycol, glycerin, 1,2 hexanediol, diisostearyl malate and various propylene glycol derivatives, although this list is not exhaustive.\\n\\nUsage levels of 3-O ethyl ascorbic acid in skin care typically fall between 0.5\\u20135%. Due to its stability, lesser amounts are needed compared with pure vitamin C. Levels above 5% may also be used, depending on desired benefits. Amounts up to 30% have been shown to be non-irritating on human skin samples.\\n\\nWritten by: Paula's Choice Research & Education Team\\nReviewed by: Debra Jaliman MD Board-Certified Dermatologist\\nProducts with 3-O Ethyl Ascorbic Acid\\nC5 Super Boost Moisturizer\\nCurrent Price\\n$45.00\\n66\\nSHOP NOW\\nBEST SELLER\\nC5 Super Boost Eye Cream\\nCurrent Price\\n$39.00\\n46\\nSHOP NOW\\nBEST SELLER\\nSHOP ALL INGREDIENTS\\nBACK TO INGREDIENT DICTIONARY\\n3-O Ethyl Ascorbic Acid References\\nFree Radical Biology and Medicine, September 2021, pages 151\\u2013169\\nLife, May 2021, pages 1\\u201313\\nInternational Journal of Pharmaceutics, December 2019, pages 1\\u20139\\nJournal of Cosmetic Science, July-August 2018, pages 233\\u2013243\\nAAPS PharmSciTech, June 2016, pages 767\\u2013777\\nPeer-reviewed, substantiated scientific research is used to assess ingredients in this dictionary. Regulations regarding usage constraints, permitted concentration levels and availability vary by country and region.\\nRelated Articles\\n5 Super Anti-Aging Antioxidants Your Skin Needs\\nHow to Keep Your Neck & Chest Looking Young\\nAcne & Aging Skin\\nHow to Diminish Uneven Skin Tone and Get Your Glow Back\\nWhat Are Peptides and What Do They Do for Skin?\\nThe Truth About Firming Creams\\nTop 5 Reasons to Add Antioxidants to Your Skin Care Routine\\nAnti-Aging Superstars\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2350,\n          \"7\",\n          \"2370\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"combined_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4245,\n          \"5642\",\n          \"26073\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "dataset2_df.info()\n",
        "dataset2_df.isna().sum()\n",
        "print(\"Jumlah duplikasi: \", dataset2_df.duplicated().sum())\n",
        "dataset2_df.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AWWZ1fiSmAAd"
      },
      "source": [
        "### Cleaning Data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qXOF4RnfmAAd"
      },
      "source": [
        "#### Cleaning Tabel dataset1_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LgkCS7PsmAAe"
      },
      "source": [
        "##### Missing Value"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "id": "9bhDc7AQmAAf",
        "outputId": "43452201-d1f6-4edb-df9c-e803eab1bdb7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ingredient_name        0\n",
              "rating                 0\n",
              "functions             15\n",
              "link               23675\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>ingredient_name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>functions</th>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>link</th>\n",
              "      <td>23675</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "dataset1_df.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "DGTRxONvmAAf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8729d204-183f-407e-daa2-6fd42b550dbb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingredient_name        0\n",
            "rating                 0\n",
            "functions              0\n",
            "link               23675\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "dataset1_df['functions'] = dataset1_df['functions'].fillna(\"Unknown\")\n",
        "print(dataset1_df.isna().sum())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sewOHdqimAAg"
      },
      "source": [
        "#### Cleaning Tabel dataset2_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vHdJghLkmAAh"
      },
      "source": [
        "##### Missing Value"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "pgCVFc4OmAAh",
        "outputId": "cbb70695-00d2-4269-b7d5-5f9ab50b24d4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ingredient_name        0\n",
              "rating                 0\n",
              "functions             14\n",
              "link               23675\n",
              "benefits           24550\n",
              "categories         23724\n",
              "glance             25132\n",
              "references         25194\n",
              "all                23692\n",
              "description        23704\n",
              "combined_text          1\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>ingredient_name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>functions</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>link</th>\n",
              "      <td>23675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>benefits</th>\n",
              "      <td>24550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>categories</th>\n",
              "      <td>23724</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>glance</th>\n",
              "      <td>25132</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>references</th>\n",
              "      <td>25194</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>all</th>\n",
              "      <td>23692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>description</th>\n",
              "      <td>23704</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>combined_text</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "dataset2_df.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "qPgHXr_wmAAh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8adfed88-f6a0-4afa-ab22-b028ef919e61"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingredient_name        0\n",
            "rating                 0\n",
            "functions              0\n",
            "link               23675\n",
            "benefits           24550\n",
            "categories         23724\n",
            "glance             25132\n",
            "references         25194\n",
            "all                23692\n",
            "description        23704\n",
            "combined_text          1\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "dataset2_df['functions'] = dataset2_df['functions'].fillna(\"Unknown\")\n",
        "print(dataset2_df.isna().sum())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JtFMojfHmAAi"
      },
      "source": [
        "### Drop Column Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "dlUOWuPYmAAp"
      },
      "outputs": [],
      "source": [
        "dataset1_df = dataset1_df.drop(columns='link')\n",
        "dataset2_df = dataset2_df.drop(columns=['categories', 'glance', 'references', 'all', 'description', 'combined_text', 'link'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i9OQKwOEmAAp"
      },
      "source": [
        "### Exploratory Data Analysis (EDA)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_2cR13-cmAAp"
      },
      "source": [
        "#### Explore Tabel dataset1_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "1DKd1nAlmAAq",
        "outputId": "f1399b0e-5ecf-414c-cb41-ee1f76c9b53d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                         ingredient_name     rating  \\\n",
              "24564                                     Tetrapeptide-5  NOT RATED   \n",
              "13840  Laurdimoniumhydroxypropyl Laurylglucosides Chl...  NOT RATED   \n",
              "13697                         Lactobacillus/Whey Ferment  NOT RATED   \n",
              "2061                                                 TEA    AVERAGE   \n",
              "14748              Mentha Canadensis Branch/Leaf Extract  NOT RATED   \n",
              "\n",
              "                                               functions  \n",
              "24564  Functions: Skin Conditioning. We have not yet ...  \n",
              "13840  Functions: Skin Conditioning, Cleansing Agent,...  \n",
              "13697  Functions: Skin Conditioning. We have not yet ...  \n",
              "2061   Used in cosmetics as a pH balancer. Like all a...  \n",
              "14748  Functions: Humectant, Skin Conditioning. We ha...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ac4c5286-b9b2-4d1c-80a1-cecb1192cf73\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>24564</th>\n",
              "      <td>Tetrapeptide-5</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13840</th>\n",
              "      <td>Laurdimoniumhydroxypropyl Laurylglucosides Chl...</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning, Cleansing Agent,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13697</th>\n",
              "      <td>Lactobacillus/Whey Ferment</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2061</th>\n",
              "      <td>TEA</td>\n",
              "      <td>AVERAGE</td>\n",
              "      <td>Used in cosmetics as a pH balancer. Like all a...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14748</th>\n",
              "      <td>Mentha Canadensis Branch/Leaf Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ac4c5286-b9b2-4d1c-80a1-cecb1192cf73')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ac4c5286-b9b2-4d1c-80a1-cecb1192cf73 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ac4c5286-b9b2-4d1c-80a1-cecb1192cf73');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a9bcc34a-f4ac-4644-998b-e203c2b3f013\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a9bcc34a-f4ac-4644-998b-e203c2b3f013')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a9bcc34a-f4ac-4644-998b-e203c2b3f013 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset1_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"ingredient_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Laurdimoniumhydroxypropyl Laurylglucosides Chloride\",\n          \"Mentha Canadensis Branch/Leaf Extract\",\n          \"Lactobacillus/Whey Ferment\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"AVERAGE\",\n          \"NOT RATED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"functions\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Functions: Skin Conditioning, Cleansing Agent, Emulsifier. We have not yet rated this ingredient because we have not had a chance to review the research on it.\",\n          \"Functions: Humectant, Skin Conditioning. We have not yet rated this ingredient because we have not had a chance to review the research on it.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "dataset1_df.sample(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "5Sh2gDVKmAAq",
        "outputId": "def610de-2e60-489a-bdf2-7bfbfdda0253"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       ingredient_name     rating  \\\n",
              "count            26087      26087   \n",
              "unique           26084          6   \n",
              "top            Albumen  NOT RATED   \n",
              "freq                 2      23675   \n",
              "\n",
              "                                                functions  \n",
              "count                                               26087  \n",
              "unique                                               4056  \n",
              "top     Functions: Skin Conditioning. We have not yet ...  \n",
              "freq                                                 5642  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-00648734-b42b-4a46-9acd-9b53e970d1c9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>26087</td>\n",
              "      <td>26087</td>\n",
              "      <td>26087</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>26084</td>\n",
              "      <td>6</td>\n",
              "      <td>4056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Albumen</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>2</td>\n",
              "      <td>23675</td>\n",
              "      <td>5642</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00648734-b42b-4a46-9acd-9b53e970d1c9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-00648734-b42b-4a46-9acd-9b53e970d1c9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-00648734-b42b-4a46-9acd-9b53e970d1c9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c49a31df-b559-4bcd-9d63-9fd7c54afd0a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c49a31df-b559-4bcd-9d63-9fd7c54afd0a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c49a31df-b559-4bcd-9d63-9fd7c54afd0a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset1_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"ingredient_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          26084,\n          \"2\",\n          \"26087\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6,\n          \"23675\",\n          \"26087\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"functions\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4056,\n          \"5642\",\n          \"26087\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "dataset1_df.describe(include=\"all\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "id": "j_tuv0BhmAAq",
        "outputId": "49af69a2-d0ce-4ec1-9fa0-bbdbb7c7eda0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method Series.duplicated of 0                           3-O Ethyl Ascorbic Acid\n",
              "1                                              Acai\n",
              "2                             Acerola Fruit Extract\n",
              "3                              Acetyl Carnitine HCL\n",
              "4                    Acetyl Dipeptide-1 Cetyl Ester\n",
              "                            ...                    \n",
              "26082                        Zostera Marina Extract\n",
              "26083       Zygophyllum Qatarense Leaf/Stem Extract\n",
              "26084    Zygosaccharomyces Microellipsoides Ferment\n",
              "26085                     Zymomonas Ferment Extract\n",
              "26086                    Zymomonas Ferment Filtrate\n",
              "Name: ingredient_name, Length: 26087, dtype: object>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.series.Series.duplicated</b><br/>def duplicated(keep: DropKeep=&#x27;first&#x27;) -&gt; Series</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/series.py</a>Indicate duplicate Series values.\n",
              "\n",
              "Duplicated values are indicated as ``True`` values in the resulting\n",
              "Series. Either all duplicates, all except the first or all except the\n",
              "last occurrence of duplicates can be indicated.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "keep : {&#x27;first&#x27;, &#x27;last&#x27;, False}, default &#x27;first&#x27;\n",
              "    Method to handle dropping duplicates:\n",
              "\n",
              "    - &#x27;first&#x27; : Mark duplicates as ``True`` except for the first\n",
              "      occurrence.\n",
              "    - &#x27;last&#x27; : Mark duplicates as ``True`` except for the last\n",
              "      occurrence.\n",
              "    - ``False`` : Mark all duplicates as ``True``.\n",
              "\n",
              "Returns\n",
              "-------\n",
              "Series[bool]\n",
              "    Series indicating whether each value has occurred in the\n",
              "    preceding values.\n",
              "\n",
              "See Also\n",
              "--------\n",
              "Index.duplicated : Equivalent method on pandas.Index.\n",
              "DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n",
              "Series.drop_duplicates : Remove duplicate values from Series.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "By default, for each set of duplicated values, the first occurrence is\n",
              "set on False and all others on True:\n",
              "\n",
              "&gt;&gt;&gt; animals = pd.Series([&#x27;llama&#x27;, &#x27;cow&#x27;, &#x27;llama&#x27;, &#x27;beetle&#x27;, &#x27;llama&#x27;])\n",
              "&gt;&gt;&gt; animals.duplicated()\n",
              "0    False\n",
              "1    False\n",
              "2     True\n",
              "3    False\n",
              "4     True\n",
              "dtype: bool\n",
              "\n",
              "which is equivalent to\n",
              "\n",
              "&gt;&gt;&gt; animals.duplicated(keep=&#x27;first&#x27;)\n",
              "0    False\n",
              "1    False\n",
              "2     True\n",
              "3    False\n",
              "4     True\n",
              "dtype: bool\n",
              "\n",
              "By using &#x27;last&#x27;, the last occurrence of each set of duplicated values\n",
              "is set on False and all others on True:\n",
              "\n",
              "&gt;&gt;&gt; animals.duplicated(keep=&#x27;last&#x27;)\n",
              "0     True\n",
              "1    False\n",
              "2     True\n",
              "3    False\n",
              "4    False\n",
              "dtype: bool\n",
              "\n",
              "By setting keep on ``False``, all duplicates are True:\n",
              "\n",
              "&gt;&gt;&gt; animals.duplicated(keep=False)\n",
              "0     True\n",
              "1    False\n",
              "2     True\n",
              "3    False\n",
              "4     True\n",
              "dtype: bool</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 2528);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "dataset1_df.ingredient_name.is_unique\n",
        "dataset1_df.ingredient_name.duplicated"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rPiUm1R4mAAr",
        "outputId": "9b15057e-05c0-4dd9-b044-d6ecd60c0909"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                         ingredient_name  \\\n",
            "0                                        1, 2-Hexanediol   \n",
            "1                 1,1-Dimethyl-2-Phenylethyl Isobutyrate   \n",
            "2                1,1-Dimethyl-3-Phenylpropyl Isobutyrate   \n",
            "3                                        1,10-Decanediol   \n",
            "4      1,2,3,4,4A,5,6,7-Octahydro-2,5,5-Trimethyl-2-N...   \n",
            "...                                                  ...   \n",
            "26079                          Zymomonas Ferment Extract   \n",
            "26080                         Zymomonas Ferment Filtrate   \n",
            "26081                                biosaccharide gum-1   \n",
            "26082                                        pH Adjuster   \n",
            "26083                                       polydextrose   \n",
            "\n",
            "                                               functions  \n",
            "0      1,2 hexanediol is a synthetic ingredient with ...  \n",
            "1      Functions: Fragrance. We have not yet rated th...  \n",
            "2      Functions: Fragrance. We have not yet rated th...  \n",
            "3      Functions: Solvent. We have not yet rated this...  \n",
            "4      Functions: Fragrance. We have not yet rated th...  \n",
            "...                                                  ...  \n",
            "26079  Functions: Humectant, Skin Conditioning. We ha...  \n",
            "26080  Functions: Humectant, Skin Conditioning. We ha...  \n",
            "26081  A complex sugar-derived ingredient that moistu...  \n",
            "26082  A type of ingredient used to modify the pH of ...  \n",
            "26083  A sugar-derived prebiotic polymer that has bul...  \n",
            "\n",
            "[26084 rows x 2 columns]\n"
          ]
        }
      ],
      "source": [
        "#Mengelompokkan ingredients berdasarkan fungsi\n",
        "aggregated_data = dataset1_df.groupby('ingredient_name').agg({\n",
        "    'functions': lambda x: ', '.join(set(x.dropna()))\n",
        "}).reset_index()\n",
        "print(aggregated_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LYXSU5xGmAAr",
        "outputId": "6a181f96-9a60-4d93-b584-088ab10a46b1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                    ingredient_count\n",
            "functions                                                           \n",
            "1,2 hexanediol is a synthetic ingredient with m...                 1\n",
            "2,3-butanediol is a synthetic or plant-derived ...                 1\n",
            "A biomimetic peptide (meaning it is designed to...                 1\n",
            "A blend of amino acids from wheat protein after...                 1\n",
            "A blend of fermented filtrates from green tea, ...                 1\n",
            "...                                                              ...\n",
            "Yellow 5 lake is synthetic coloring agent appro...                 1\n",
            "Zinc gluconate is the zinc salt of gluconic aci...                 1\n",
            "myristamidopropyl PG-dimonium chloride phosphat...                 1\n",
            "pH adjusting ingredient used to help neutralize...                 1\n",
            "“Incidentals” refers to any ingredients in cosm...                 1\n",
            "\n",
            "[4056 rows x 1 columns]\n"
          ]
        }
      ],
      "source": [
        "#Menggabungkan fungsi yang sama untuk setiap ingredients\n",
        "grouped = dataset1_df.groupby('functions').agg({\n",
        "    'ingredient_name': 'count'\n",
        "}).rename(columns={'ingredient_name': 'ingredient_count'})\n",
        "print(grouped)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "57DbI-TTmAAs"
      },
      "source": [
        "#### Explore Tabel dataset2_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gTIQmZWrmAAs",
        "outputId": "7f3e695c-282c-4143-8da5-8b7cc7529d05"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                         ingredient_name     rating  \\\n",
              "18249  Perfluorononylethyl Carboxydecyl Lauryl/Beheny...  NOT RATED   \n",
              "9318                                       Dipalmitamine  NOT RATED   \n",
              "24410                    Tetradecenyl Stearylsuccinamide  NOT RATED   \n",
              "22445                                 Sh-Polypeptide-107  NOT RATED   \n",
              "21496               Rosa Davurica Callus Culture Extract  NOT RATED   \n",
              "\n",
              "                                               functions benefits  \n",
              "18249  Functions: Skin Conditioning. We have not yet ...      NaN  \n",
              "9318   Functions: Antistatic. We have not yet rated t...      NaN  \n",
              "24410  Functions: Humectant, Skin Conditioning, Emoll...      NaN  \n",
              "22445  Functions: Skin Conditioning. We have not yet ...      NaN  \n",
              "21496  Functions: Antioxidant, Hair Conditioning, Ski...      NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-829b1597-fd02-45a4-810f-c14b6b98ec69\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "      <th>benefits</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18249</th>\n",
              "      <td>Perfluorononylethyl Carboxydecyl Lauryl/Beheny...</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9318</th>\n",
              "      <td>Dipalmitamine</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Antistatic. We have not yet rated t...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24410</th>\n",
              "      <td>Tetradecenyl Stearylsuccinamide</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning, Emoll...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22445</th>\n",
              "      <td>Sh-Polypeptide-107</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21496</th>\n",
              "      <td>Rosa Davurica Callus Culture Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Antioxidant, Hair Conditioning, Ski...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-829b1597-fd02-45a4-810f-c14b6b98ec69')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-829b1597-fd02-45a4-810f-c14b6b98ec69 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-829b1597-fd02-45a4-810f-c14b6b98ec69');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-86f70aba-d79b-41d5-9279-d1216b340a31\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-86f70aba-d79b-41d5-9279-d1216b340a31')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-86f70aba-d79b-41d5-9279-d1216b340a31 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "dataset2_df.sample(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "XI9UY3xGmAAs",
        "outputId": "5bb04b28-759c-4131-a280-a9f260a548a7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                ingredient_name     rating  \\\n",
              "count                     26074      26074   \n",
              "unique                    26074          6   \n",
              "top     3-O Ethyl Ascorbic Acid  NOT RATED   \n",
              "freq                          1      23675   \n",
              "\n",
              "                                                functions   benefits  \n",
              "count                                               26074       1524  \n",
              "unique                                               4045         90  \n",
              "top     Functions: Skin Conditioning. We have not yet ...  Hydration  \n",
              "freq                                                 5642        501  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0893f37c-5e75-439e-ad29-b97d83fe07e5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "      <th>benefits</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>26074</td>\n",
              "      <td>26074</td>\n",
              "      <td>26074</td>\n",
              "      <td>1524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>26074</td>\n",
              "      <td>6</td>\n",
              "      <td>4045</td>\n",
              "      <td>90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>3-O Ethyl Ascorbic Acid</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "      <td>Hydration</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1</td>\n",
              "      <td>23675</td>\n",
              "      <td>5642</td>\n",
              "      <td>501</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0893f37c-5e75-439e-ad29-b97d83fe07e5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0893f37c-5e75-439e-ad29-b97d83fe07e5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0893f37c-5e75-439e-ad29-b97d83fe07e5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5c1989f5-cb3a-4729-8307-fdfe08b071cd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5c1989f5-cb3a-4729-8307-fdfe08b071cd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5c1989f5-cb3a-4729-8307-fdfe08b071cd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset2_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"ingredient_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"26074\",\n          \"3-O Ethyl Ascorbic Acid\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6,\n          \"23675\",\n          \"26074\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"functions\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4045,\n          \"5642\",\n          \"26074\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"benefits\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          90,\n          \"501\",\n          \"1524\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "dataset2_df.describe(include=\"all\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "id": "F8aE9cP_mAAs",
        "outputId": "891b8921-f97b-4038-9b3e-d6e6b27b3b62"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method Series.duplicated of 0                           3-O Ethyl Ascorbic Acid\n",
              "1                                              Acai\n",
              "2                             Acerola Fruit Extract\n",
              "3                              Acetyl Carnitine HCL\n",
              "4                    Acetyl Dipeptide-1 Cetyl Ester\n",
              "                            ...                    \n",
              "26069                        Zostera Marina Extract\n",
              "26070       Zygophyllum Qatarense Leaf/Stem Extract\n",
              "26071    Zygosaccharomyces Microellipsoides Ferment\n",
              "26072                     Zymomonas Ferment Extract\n",
              "26073                    Zymomonas Ferment Filtrate\n",
              "Name: ingredient_name, Length: 26074, dtype: object>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.series.Series.duplicated</b><br/>def duplicated(keep: DropKeep=&#x27;first&#x27;) -&gt; Series</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/series.py</a>Indicate duplicate Series values.\n",
              "\n",
              "Duplicated values are indicated as ``True`` values in the resulting\n",
              "Series. Either all duplicates, all except the first or all except the\n",
              "last occurrence of duplicates can be indicated.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "keep : {&#x27;first&#x27;, &#x27;last&#x27;, False}, default &#x27;first&#x27;\n",
              "    Method to handle dropping duplicates:\n",
              "\n",
              "    - &#x27;first&#x27; : Mark duplicates as ``True`` except for the first\n",
              "      occurrence.\n",
              "    - &#x27;last&#x27; : Mark duplicates as ``True`` except for the last\n",
              "      occurrence.\n",
              "    - ``False`` : Mark all duplicates as ``True``.\n",
              "\n",
              "Returns\n",
              "-------\n",
              "Series[bool]\n",
              "    Series indicating whether each value has occurred in the\n",
              "    preceding values.\n",
              "\n",
              "See Also\n",
              "--------\n",
              "Index.duplicated : Equivalent method on pandas.Index.\n",
              "DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n",
              "Series.drop_duplicates : Remove duplicate values from Series.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "By default, for each set of duplicated values, the first occurrence is\n",
              "set on False and all others on True:\n",
              "\n",
              "&gt;&gt;&gt; animals = pd.Series([&#x27;llama&#x27;, &#x27;cow&#x27;, &#x27;llama&#x27;, &#x27;beetle&#x27;, &#x27;llama&#x27;])\n",
              "&gt;&gt;&gt; animals.duplicated()\n",
              "0    False\n",
              "1    False\n",
              "2     True\n",
              "3    False\n",
              "4     True\n",
              "dtype: bool\n",
              "\n",
              "which is equivalent to\n",
              "\n",
              "&gt;&gt;&gt; animals.duplicated(keep=&#x27;first&#x27;)\n",
              "0    False\n",
              "1    False\n",
              "2     True\n",
              "3    False\n",
              "4     True\n",
              "dtype: bool\n",
              "\n",
              "By using &#x27;last&#x27;, the last occurrence of each set of duplicated values\n",
              "is set on False and all others on True:\n",
              "\n",
              "&gt;&gt;&gt; animals.duplicated(keep=&#x27;last&#x27;)\n",
              "0     True\n",
              "1    False\n",
              "2     True\n",
              "3    False\n",
              "4    False\n",
              "dtype: bool\n",
              "\n",
              "By setting keep on ``False``, all duplicates are True:\n",
              "\n",
              "&gt;&gt;&gt; animals.duplicated(keep=False)\n",
              "0     True\n",
              "1    False\n",
              "2     True\n",
              "3    False\n",
              "4     True\n",
              "dtype: bool</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 2528);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "dataset2_df.ingredient_name.is_unique\n",
        "dataset2_df.ingredient_name.duplicated"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset1_df.to_csv(\"/content/sample_data/dataset1_clean.csv\", index=False)\n",
        "dataset2_df.to_csv(\"/content/sample_data/dataset2_clean.csv\", index=False)"
      ],
      "metadata": {
        "id": "QEMv1H5Wr9ON"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# import data\n",
        "dataset2_df = pd.read_csv('/content/sample_data/dataset2_clean.csv')\n",
        "dataset2_df #show data below"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 580
        },
        "id": "OckSP7TksFc8",
        "outputId": "c513eb9c-e1f6-4490-d0f3-78d44f3f18f2"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  ingredient_name     rating  \\\n",
              "0                         3-O Ethyl Ascorbic Acid       BEST   \n",
              "1                                            Acai       BEST   \n",
              "2                           Acerola Fruit Extract       BEST   \n",
              "3                            Acetyl Carnitine HCL       BEST   \n",
              "4                  Acetyl Dipeptide-1 Cetyl Ester       BEST   \n",
              "...                                           ...        ...   \n",
              "26069                      Zostera Marina Extract  NOT RATED   \n",
              "26070     Zygophyllum Qatarense Leaf/Stem Extract  NOT RATED   \n",
              "26071  Zygosaccharomyces Microellipsoides Ferment  NOT RATED   \n",
              "26072                   Zymomonas Ferment Extract  NOT RATED   \n",
              "26073                  Zymomonas Ferment Filtrate  NOT RATED   \n",
              "\n",
              "                                               functions  \\\n",
              "0      This potent antioxidant is a highly stable for...   \n",
              "1      Pronounced \"ah-sigh-ee\", this small berry has ...   \n",
              "2      This fruit extract is a potent source of antio...   \n",
              "3                           Functions as an antioxidant.   \n",
              "4      A lab-made skin-firming peptide formed from a ...   \n",
              "...                                                  ...   \n",
              "26069  Functions: Skin Conditioning. We have not yet ...   \n",
              "26070  Functions: Antioxidant. We have not yet rated ...   \n",
              "26071  Functions: Humectant. We have not yet rated th...   \n",
              "26072  Functions: Humectant, Skin Conditioning. We ha...   \n",
              "26073  Functions: Humectant, Skin Conditioning. We ha...   \n",
              "\n",
              "                                            benefits  \n",
              "0      Anti-Aging, Evens Skin Tone, Dark Spot Fading  \n",
              "1                               Anti-Aging, Soothing  \n",
              "2                                         Anti-Aging  \n",
              "3                                          Hydration  \n",
              "4                                         Anti-Aging  \n",
              "...                                              ...  \n",
              "26069                                            NaN  \n",
              "26070                                            NaN  \n",
              "26071                                            NaN  \n",
              "26072                                            NaN  \n",
              "26073                                            NaN  \n",
              "\n",
              "[26074 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-73b896cb-4d29-4a62-8019-7071c2f51b26\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "      <th>benefits</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3-O Ethyl Ascorbic Acid</td>\n",
              "      <td>BEST</td>\n",
              "      <td>This potent antioxidant is a highly stable for...</td>\n",
              "      <td>Anti-Aging, Evens Skin Tone, Dark Spot Fading</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Acai</td>\n",
              "      <td>BEST</td>\n",
              "      <td>Pronounced \"ah-sigh-ee\", this small berry has ...</td>\n",
              "      <td>Anti-Aging, Soothing</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Acerola Fruit Extract</td>\n",
              "      <td>BEST</td>\n",
              "      <td>This fruit extract is a potent source of antio...</td>\n",
              "      <td>Anti-Aging</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Acetyl Carnitine HCL</td>\n",
              "      <td>BEST</td>\n",
              "      <td>Functions as an antioxidant.</td>\n",
              "      <td>Hydration</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Acetyl Dipeptide-1 Cetyl Ester</td>\n",
              "      <td>BEST</td>\n",
              "      <td>A lab-made skin-firming peptide formed from a ...</td>\n",
              "      <td>Anti-Aging</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26069</th>\n",
              "      <td>Zostera Marina Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26070</th>\n",
              "      <td>Zygophyllum Qatarense Leaf/Stem Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Antioxidant. We have not yet rated ...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26071</th>\n",
              "      <td>Zygosaccharomyces Microellipsoides Ferment</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant. We have not yet rated th...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26072</th>\n",
              "      <td>Zymomonas Ferment Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26073</th>\n",
              "      <td>Zymomonas Ferment Filtrate</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>26074 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-73b896cb-4d29-4a62-8019-7071c2f51b26')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-73b896cb-4d29-4a62-8019-7071c2f51b26 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-73b896cb-4d29-4a62-8019-7071c2f51b26');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eaa959ac-a020-4711-bbd5-41fe84c63d75\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eaa959ac-a020-4711-bbd5-41fe84c63d75')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eaa959ac-a020-4711-bbd5-41fe84c63d75 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_73ad5a31-372b-4dca-beea-4f3086e51235\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dataset2_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_73ad5a31-372b-4dca-beea-4f3086e51235 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dataset2_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset2_df",
              "summary": "{\n  \"name\": \"dataset2_df\",\n  \"rows\": 26074,\n  \"fields\": [\n    {\n      \"column\": \"ingredient_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26074,\n        \"samples\": [\n          \"PEG/PPG-18/18 Dimethicone\",\n          \"2,4,6-Trimethyl-3-Cyclohexenecarbaldehyde\",\n          \"Acacia Dealbata Flower Wax\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"BEST\",\n          \"GOOD\",\n          \"NOT RATED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"functions\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4045,\n        \"samples\": [\n          \"Functions: Anticaking, Film Forming. We have not yet rated this ingredient because we have not had a chance to review the research on it.\",\n          \"Also known as green tea oil, this oil is a rich source of antioxidants and fatty acids.\",\n          \"Functions: Hair Conditioning, Skin Conditioning, Skin Protecting. We have not yet rated this ingredient because we have not had a chance to review the research on it.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"benefits\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 90,\n        \"samples\": [\n          \"Anti-Acne, Anti-Aging, Evens Skin Tone\",\n          \"Anti-Aging, Evens Skin Tone, Soothing\",\n          \"Anti-Acne, Soothing\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7VLHdxjpmAAt",
        "outputId": "30726cd2-6e0b-4040-f10c-619ebcd4ed10"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                         ingredient_name  rating  \\\n",
            "0                                        1, 2-Hexanediol       1   \n",
            "1                 1,1-Dimethyl-2-Phenylethyl Isobutyrate       1   \n",
            "2                1,1-Dimethyl-3-Phenylpropyl Isobutyrate       1   \n",
            "3                                        1,10-Decanediol       1   \n",
            "4      1,2,3,4,4A,5,6,7-Octahydro-2,5,5-Trimethyl-2-N...       1   \n",
            "...                                                  ...     ...   \n",
            "26069                          Zymomonas Ferment Extract       1   \n",
            "26070                         Zymomonas Ferment Filtrate       1   \n",
            "26071                                biosaccharide gum-1       1   \n",
            "26072                                        pH Adjuster       1   \n",
            "26073                                       polydextrose       1   \n",
            "\n",
            "                  benefits  \n",
            "0                Hydration  \n",
            "1                           \n",
            "2                           \n",
            "3                           \n",
            "4                           \n",
            "...                    ...  \n",
            "26069                       \n",
            "26070                       \n",
            "26071  Hydration, Soothing  \n",
            "26072                       \n",
            "26073            Hydration  \n",
            "\n",
            "[26074 rows x 3 columns]\n"
          ]
        }
      ],
      "source": [
        "aggregated_data = dataset2_df.groupby('ingredient_name').agg({\n",
        "    'rating': 'count',  # Misalnya, rata-rata rating\n",
        "    'benefits': lambda x: ', '.join(set(x.dropna()))  # Menggabungkan manfaat unik\n",
        "}).reset_index()\n",
        "\n",
        "print(aggregated_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "29bn16zVmAAt",
        "outputId": "c386e999-4e77-405f-fa22-418ea38ef5cf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                    ingredient_count\n",
            "functions                                                           \n",
            "1,2 hexanediol is a synthetic ingredient with m...                 1\n",
            "2,3-butanediol is a synthetic or plant-derived ...                 1\n",
            "A biomimetic peptide (meaning it is designed to...                 1\n",
            "A blend of amino acids from wheat protein after...                 1\n",
            "A blend of fermented filtrates from green tea, ...                 1\n",
            "...                                                              ...\n",
            "Yellow 5 lake is synthetic coloring agent appro...                 1\n",
            "Zinc gluconate is the zinc salt of gluconic aci...                 1\n",
            "myristamidopropyl PG-dimonium chloride phosphat...                 1\n",
            "pH adjusting ingredient used to help neutralize...                 1\n",
            "“Incidentals” refers to any ingredients in cosm...                 1\n",
            "\n",
            "[4045 rows x 1 columns]\n"
          ]
        }
      ],
      "source": [
        "#Menggabungkan fungsi yang sama untuk setiap ingredients\n",
        "grouped = dataset2_df.groupby('functions').agg({\n",
        "    'ingredient_name': 'count'\n",
        "}).rename(columns={'ingredient_name': 'ingredient_count'})\n",
        "print(grouped)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gabungkan nilai kolom 'benefit' dari dataset2_df ke dataset1_df berdasarkan 'ingredient_name'\n",
        "dataset1_df = dataset1_df.merge(\n",
        "    dataset2_df[['ingredient_name', 'benefits']],\n",
        "    on='ingredient_name',\n",
        "    how='left'  # Menggunakan left join untuk menjaga semua data dari dataset1_df\n",
        ")\n",
        "\n",
        "# Gabungkan kedua DataFrame\n",
        "datasetAll_df = pd.concat([dataset1_df, dataset2_df], axis=0, ignore_index=True)\n",
        "\n",
        "# Tampilkan hasil\n",
        "print(datasetAll_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8_jaW9i70Y99",
        "outputId": "2e943cb9-db1d-44df-d8e6-81b30b69d0a1"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                  ingredient_name     rating  \\\n",
            "0                         3-O Ethyl Ascorbic Acid       BEST   \n",
            "1                                            Acai       BEST   \n",
            "2                           Acerola Fruit Extract       BEST   \n",
            "3                            Acetyl Carnitine HCL       BEST   \n",
            "4                  Acetyl Dipeptide-1 Cetyl Ester       BEST   \n",
            "...                                           ...        ...   \n",
            "52156                      Zostera Marina Extract  NOT RATED   \n",
            "52157     Zygophyllum Qatarense Leaf/Stem Extract  NOT RATED   \n",
            "52158  Zygosaccharomyces Microellipsoides Ferment  NOT RATED   \n",
            "52159                   Zymomonas Ferment Extract  NOT RATED   \n",
            "52160                  Zymomonas Ferment Filtrate  NOT RATED   \n",
            "\n",
            "                                               functions  \\\n",
            "0      This potent antioxidant is a highly stable for...   \n",
            "1      Pronounced \"ah-sigh-ee\", this small berry has ...   \n",
            "2      This fruit extract is a potent source of antio...   \n",
            "3                           Functions as an antioxidant.   \n",
            "4      A lab-made skin-firming peptide formed from a ...   \n",
            "...                                                  ...   \n",
            "52156  Functions: Skin Conditioning. We have not yet ...   \n",
            "52157  Functions: Antioxidant. We have not yet rated ...   \n",
            "52158  Functions: Humectant. We have not yet rated th...   \n",
            "52159  Functions: Humectant, Skin Conditioning. We ha...   \n",
            "52160  Functions: Humectant, Skin Conditioning. We ha...   \n",
            "\n",
            "                                            benefits  \n",
            "0      Anti-Aging, Evens Skin Tone, Dark Spot Fading  \n",
            "1                               Anti-Aging, Soothing  \n",
            "2                                         Anti-Aging  \n",
            "3                                          Hydration  \n",
            "4                                         Anti-Aging  \n",
            "...                                              ...  \n",
            "52156                                            NaN  \n",
            "52157                                            NaN  \n",
            "52158                                            NaN  \n",
            "52159                                            NaN  \n",
            "52160                                            NaN  \n",
            "\n",
            "[52161 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L-6uM8mTmAAu"
      },
      "source": [
        "##### Menggabungkan dataset1 dan dataset2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 580
        },
        "id": "yMuzZ_EsmAAu",
        "outputId": "92430ab0-b3d8-43b8-96b1-793eadcd10e6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  ingredient_name     rating  \\\n",
              "0                         3-O Ethyl Ascorbic Acid       BEST   \n",
              "1                                            Acai       BEST   \n",
              "2                           Acerola Fruit Extract       BEST   \n",
              "3                            Acetyl Carnitine HCL       BEST   \n",
              "4                  Acetyl Dipeptide-1 Cetyl Ester       BEST   \n",
              "...                                           ...        ...   \n",
              "52156                      Zostera Marina Extract  NOT RATED   \n",
              "52157     Zygophyllum Qatarense Leaf/Stem Extract  NOT RATED   \n",
              "52158  Zygosaccharomyces Microellipsoides Ferment  NOT RATED   \n",
              "52159                   Zymomonas Ferment Extract  NOT RATED   \n",
              "52160                  Zymomonas Ferment Filtrate  NOT RATED   \n",
              "\n",
              "                                               functions  \\\n",
              "0      This potent antioxidant is a highly stable for...   \n",
              "1      Pronounced \"ah-sigh-ee\", this small berry has ...   \n",
              "2      This fruit extract is a potent source of antio...   \n",
              "3                           Functions as an antioxidant.   \n",
              "4      A lab-made skin-firming peptide formed from a ...   \n",
              "...                                                  ...   \n",
              "52156  Functions: Skin Conditioning. We have not yet ...   \n",
              "52157  Functions: Antioxidant. We have not yet rated ...   \n",
              "52158  Functions: Humectant. We have not yet rated th...   \n",
              "52159  Functions: Humectant, Skin Conditioning. We ha...   \n",
              "52160  Functions: Humectant, Skin Conditioning. We ha...   \n",
              "\n",
              "                                            benefits  \n",
              "0      Anti-Aging, Evens Skin Tone, Dark Spot Fading  \n",
              "1                               Anti-Aging, Soothing  \n",
              "2                                         Anti-Aging  \n",
              "3                                          Hydration  \n",
              "4                                         Anti-Aging  \n",
              "...                                              ...  \n",
              "52156                                            NaN  \n",
              "52157                                            NaN  \n",
              "52158                                            NaN  \n",
              "52159                                            NaN  \n",
              "52160                                            NaN  \n",
              "\n",
              "[52161 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cd9d9137-d2ad-4eaf-8261-d65a0e1c35c4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "      <th>benefits</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3-O Ethyl Ascorbic Acid</td>\n",
              "      <td>BEST</td>\n",
              "      <td>This potent antioxidant is a highly stable for...</td>\n",
              "      <td>Anti-Aging, Evens Skin Tone, Dark Spot Fading</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Acai</td>\n",
              "      <td>BEST</td>\n",
              "      <td>Pronounced \"ah-sigh-ee\", this small berry has ...</td>\n",
              "      <td>Anti-Aging, Soothing</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Acerola Fruit Extract</td>\n",
              "      <td>BEST</td>\n",
              "      <td>This fruit extract is a potent source of antio...</td>\n",
              "      <td>Anti-Aging</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Acetyl Carnitine HCL</td>\n",
              "      <td>BEST</td>\n",
              "      <td>Functions as an antioxidant.</td>\n",
              "      <td>Hydration</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Acetyl Dipeptide-1 Cetyl Ester</td>\n",
              "      <td>BEST</td>\n",
              "      <td>A lab-made skin-firming peptide formed from a ...</td>\n",
              "      <td>Anti-Aging</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52156</th>\n",
              "      <td>Zostera Marina Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52157</th>\n",
              "      <td>Zygophyllum Qatarense Leaf/Stem Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Antioxidant. We have not yet rated ...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52158</th>\n",
              "      <td>Zygosaccharomyces Microellipsoides Ferment</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant. We have not yet rated th...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52159</th>\n",
              "      <td>Zymomonas Ferment Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52160</th>\n",
              "      <td>Zymomonas Ferment Filtrate</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>52161 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd9d9137-d2ad-4eaf-8261-d65a0e1c35c4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cd9d9137-d2ad-4eaf-8261-d65a0e1c35c4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cd9d9137-d2ad-4eaf-8261-d65a0e1c35c4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-50d93f32-32ec-4821-b510-227c77dbd702\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-50d93f32-32ec-4821-b510-227c77dbd702')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-50d93f32-32ec-4821-b510-227c77dbd702 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_78d3997f-b214-46da-96cd-a4edb53e46ed\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('datasetAll_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_78d3997f-b214-46da-96cd-a4edb53e46ed button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('datasetAll_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "datasetAll_df",
              "summary": "{\n  \"name\": \"datasetAll_df\",\n  \"rows\": 52161,\n  \"fields\": [\n    {\n      \"column\": \"ingredient_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26084,\n        \"samples\": [\n          \"PCA Dimethicone\",\n          \"2,3,6-Trimethylcyclohexylmethyl Acetate\",\n          \"Acacia Catechu Gum\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"BEST\",\n          \"GOOD\",\n          \"NOT RATED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"functions\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4057,\n        \"samples\": [\n          \"Functions as a texture-enhancing ingredient in skin care formulations.\",\n          \"Functions: Binding, Emulsion Stabilizer, Film Forming, Viscosity Controlling. We have not yet rated this ingredient because we have not had a chance to review the research on it.\",\n          \"Functions: Anticaking, Antimicrobial, Opacifying. We have not yet rated this ingredient because we have not had a chance to review the research on it.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"benefits\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 90,\n        \"samples\": [\n          \"Anti-Acne, Anti-Aging, Evens Skin Tone\",\n          \"Anti-Aging, Evens Skin Tone, Soothing\",\n          \"Anti-Acne, Soothing\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "datasetAll_df = pd.concat([dataset1_df, dataset2_df], axis=0, ignore_index=True)\n",
        "datasetAll_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5CV-tBOTmAAx"
      },
      "source": [
        "### Export Clean Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "3Ttxrt7WmAAx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 580
        },
        "outputId": "0b45ca53-ec70-425e-a5d6-e86499c70b0d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  ingredient_name     rating  \\\n",
              "0                         3-O Ethyl Ascorbic Acid       BEST   \n",
              "1                                            Acai       BEST   \n",
              "2                           Acerola Fruit Extract       BEST   \n",
              "3                            Acetyl Carnitine HCL       BEST   \n",
              "4                  Acetyl Dipeptide-1 Cetyl Ester       BEST   \n",
              "...                                           ...        ...   \n",
              "52156                      Zostera Marina Extract  NOT RATED   \n",
              "52157     Zygophyllum Qatarense Leaf/Stem Extract  NOT RATED   \n",
              "52158  Zygosaccharomyces Microellipsoides Ferment  NOT RATED   \n",
              "52159                   Zymomonas Ferment Extract  NOT RATED   \n",
              "52160                  Zymomonas Ferment Filtrate  NOT RATED   \n",
              "\n",
              "                                               functions  \\\n",
              "0      This potent antioxidant is a highly stable for...   \n",
              "1      Pronounced \"ah-sigh-ee\", this small berry has ...   \n",
              "2      This fruit extract is a potent source of antio...   \n",
              "3                           Functions as an antioxidant.   \n",
              "4      A lab-made skin-firming peptide formed from a ...   \n",
              "...                                                  ...   \n",
              "52156  Functions: Skin Conditioning. We have not yet ...   \n",
              "52157  Functions: Antioxidant. We have not yet rated ...   \n",
              "52158  Functions: Humectant. We have not yet rated th...   \n",
              "52159  Functions: Humectant, Skin Conditioning. We ha...   \n",
              "52160  Functions: Humectant, Skin Conditioning. We ha...   \n",
              "\n",
              "                                            benefits  \n",
              "0      Anti-Aging, Evens Skin Tone, Dark Spot Fading  \n",
              "1                               Anti-Aging, Soothing  \n",
              "2                                         Anti-Aging  \n",
              "3                                          Hydration  \n",
              "4                                         Anti-Aging  \n",
              "...                                              ...  \n",
              "52156                                            NaN  \n",
              "52157                                            NaN  \n",
              "52158                                            NaN  \n",
              "52159                                            NaN  \n",
              "52160                                            NaN  \n",
              "\n",
              "[52161 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4b27fc0e-624c-46a0-8f86-11ef69bf2c17\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ingredient_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>functions</th>\n",
              "      <th>benefits</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3-O Ethyl Ascorbic Acid</td>\n",
              "      <td>BEST</td>\n",
              "      <td>This potent antioxidant is a highly stable for...</td>\n",
              "      <td>Anti-Aging, Evens Skin Tone, Dark Spot Fading</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Acai</td>\n",
              "      <td>BEST</td>\n",
              "      <td>Pronounced \"ah-sigh-ee\", this small berry has ...</td>\n",
              "      <td>Anti-Aging, Soothing</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Acerola Fruit Extract</td>\n",
              "      <td>BEST</td>\n",
              "      <td>This fruit extract is a potent source of antio...</td>\n",
              "      <td>Anti-Aging</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Acetyl Carnitine HCL</td>\n",
              "      <td>BEST</td>\n",
              "      <td>Functions as an antioxidant.</td>\n",
              "      <td>Hydration</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Acetyl Dipeptide-1 Cetyl Ester</td>\n",
              "      <td>BEST</td>\n",
              "      <td>A lab-made skin-firming peptide formed from a ...</td>\n",
              "      <td>Anti-Aging</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52156</th>\n",
              "      <td>Zostera Marina Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Skin Conditioning. We have not yet ...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52157</th>\n",
              "      <td>Zygophyllum Qatarense Leaf/Stem Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Antioxidant. We have not yet rated ...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52158</th>\n",
              "      <td>Zygosaccharomyces Microellipsoides Ferment</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant. We have not yet rated th...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52159</th>\n",
              "      <td>Zymomonas Ferment Extract</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52160</th>\n",
              "      <td>Zymomonas Ferment Filtrate</td>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>Functions: Humectant, Skin Conditioning. We ha...</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>52161 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b27fc0e-624c-46a0-8f86-11ef69bf2c17')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4b27fc0e-624c-46a0-8f86-11ef69bf2c17 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4b27fc0e-624c-46a0-8f86-11ef69bf2c17');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e6c664c4-0259-45eb-b80b-4f5fe041d1e3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e6c664c4-0259-45eb-b80b-4f5fe041d1e3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e6c664c4-0259-45eb-b80b-4f5fe041d1e3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_0b9a5850-a75c-4d74-944b-5d69248d914e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('datasetAll_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0b9a5850-a75c-4d74-944b-5d69248d914e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('datasetAll_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "datasetAll_df",
              "summary": "{\n  \"name\": \"datasetAll_df\",\n  \"rows\": 52161,\n  \"fields\": [\n    {\n      \"column\": \"ingredient_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26084,\n        \"samples\": [\n          \"PCA Dimethicone\",\n          \"2,3,6-Trimethylcyclohexylmethyl Acetate\",\n          \"Acacia Catechu Gum\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"BEST\",\n          \"GOOD\",\n          \"NOT RATED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"functions\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4057,\n        \"samples\": [\n          \"Functions as a texture-enhancing ingredient in skin care formulations.\",\n          \"Functions: Binding, Emulsion Stabilizer, Film Forming, Viscosity Controlling. We have not yet rated this ingredient because we have not had a chance to review the research on it.\",\n          \"Functions: Anticaking, Antimicrobial, Opacifying. We have not yet rated this ingredient because we have not had a chance to review the research on it.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"benefits\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 90,\n        \"samples\": [\n          \"Anti-Acne, Anti-Aging, Evens Skin Tone\",\n          \"Anti-Aging, Evens Skin Tone, Soothing\",\n          \"Anti-Acne, Soothing\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "# Menyimpan dataset ke file CSV\n",
        "datasetAll_df.to_csv(\"/content/sample_data/datasetAll.csv\", index=False)\n",
        "\n",
        "# import data\n",
        "datasetAll_df = pd.read_csv('/content/sample_data/datasetAll.csv')\n",
        "datasetAll_df #show data below\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i7ae9cHPmAAy"
      },
      "source": [
        "### Drop Kolom Function dan Ratings yang Tidak Jelas"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Muat dataset dari file CSV\n",
        "datasetAll_df = pd.read_csv(\"/content/sample_data/datasetAll.csv\")\n",
        "\n",
        "# Periksa jumlah baris sebelum penghapusan\n",
        "print(f\"Jumlah baris sebelum penghapusan: {len(datasetAll_df)}\")\n",
        "\n",
        "# Hapus baris mulai dari ke-2413 hingga akhir\n",
        "start_row_index = 2413 - 1  # Indeks berbasis 0\n",
        "datasetAll_df = datasetAll_df.iloc[:start_row_index]\n",
        "\n",
        "# Periksa jumlah baris setelah penghapusan\n",
        "print(f\"Jumlah baris setelah penghapusan: {len(datasetAll_df)}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AzgmUdTavtBe",
        "outputId": "4a45b137-a1af-439c-a634-f1c697eabab4"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah baris sebelum penghapusan: 52161\n",
            "Jumlah baris setelah penghapusan: 2412\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## DOWNLOAD OCR"
      ],
      "metadata": {
        "id": "HwQiB737jihv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!apt-get update\n",
        "!apt-get install -y tesseract-ocr\n",
        "\n",
        "!pip install pytesseract\n",
        "!tesseract --version"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cESEvWesjg1l",
        "outputId": "95346047-51ee-45ed-f8f5-b3e5ddc108ca"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hit:1 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease\n",
            "Hit:2 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease\n",
            "Hit:3 http://archive.ubuntu.com/ubuntu jammy InRelease\n",
            "Get:4 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]\n",
            "Get:5 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [128 kB]\n",
            "Hit:6 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease\n",
            "Hit:7 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\n",
            "Hit:8 https://r2u.stat.illinois.edu/ubuntu jammy InRelease\n",
            "Hit:9 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease\n",
            "Get:10 http://archive.ubuntu.com/ubuntu jammy-backports InRelease [127 kB]\n",
            "Fetched 384 kB in 2s (253 kB/s)\n",
            "Reading package lists... Done\n",
            "W: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\n",
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "tesseract-ocr is already the newest version (4.1.1-2.1build1).\n",
            "0 upgraded, 0 newly installed, 0 to remove and 58 not upgraded.\n",
            "Requirement already satisfied: pytesseract in /usr/local/lib/python3.10/dist-packages (0.3.13)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from pytesseract) (24.2)\n",
            "Requirement already satisfied: Pillow>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from pytesseract) (11.0.0)\n",
            "tesseract 4.1.1\n",
            " leptonica-1.82.0\n",
            "  libgif 5.1.9 : libjpeg 8d (libjpeg-turbo 2.1.1) : libpng 1.6.37 : libtiff 4.3.0 : zlib 1.2.11 : libwebp 1.2.2 : libopenjp2 2.4.0\n",
            " Found AVX2\n",
            " Found AVX\n",
            " Found FMA\n",
            " Found SSE\n",
            " Found libarchive 3.6.0 zlib/1.2.11 liblzma/5.2.5 bz2lib/1.0.8 liblz4/1.9.3 libzstd/1.4.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**PROSES OCR, NLP**"
      ],
      "metadata": {
        "id": "twGlfG3IPHps"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pytesseract\n",
        "from PIL import Image\n",
        "# Contoh penggunaan fungsi dengan gambar yang diinginkan\n",
        "image_path = '/content/image_ocr/skintific.jpg'\n",
        "\n",
        "# Fungsi untuk ekstrak teks dari gambar menggunakan OCR\n",
        "def extract_text_from_image(image_path):\n",
        "    # Buka gambar\n",
        "    img = Image.open(image_path)\n",
        "\n",
        "    # Ekstrak teks dengan pytesseract\n",
        "    detected_text = pytesseract.image_to_string(img, config=\"--psm 6\")\n",
        "    return detected_text\n",
        "\n",
        "# Panggil fungsi untuk ekstraksi teks dari gambar\n",
        "detected_text = extract_text_from_image(image_path)\n",
        "\n",
        "print(f\"Detected Text: {detected_text}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pn6vz4iRPN35",
        "outputId": "87bfa16a-ff0c-4df2-a506-7a1d92fac56e"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Detected Text: v — “\n",
            "4\n",
            "J P . - “aa\n",
            "/ A ae ‘ata\n",
            "d : rae \" if i iv ,\n",
            "\\NGREDIENTS w ie\n",
            "AQUA, MONTMORILLONITE, GLYCERIN, ARTI MUGWORT) EXTRACT,\n",
            "aia Sie Roe) een AZ CY NN ® OIL, METHYLPROPANEDIO!\n",
            "ETHYLHEXYL PALMITATE, Cl 77891, MAGNESIUM ALUMINOMETASILICATE, GLYCERYL ,\n",
            "STEARATE, VOLCANIC SOIL, PEG-100 STEARATE, 1, 2-HEXANEDIOL, HYDROXYACE-\n",
            "TOPHENONE, XANTHAN GUM, CETEARYL GLUCOSIDE, ALLANTOIN, CHLO 3\n",
            "NIACINAMIDE, CENTELLA ASIATICA EXTRACT, CERAMIDE AS, CERAMIDE EOP, CERAMIDE\n",
            "AP, SODIUM HYALURONATE, ALCHEMILLA VULGARIS EXTRACT, BISABOLOL, SILICA,\n",
            "ETHYLHEXYLGLYCERIN, DISODIUM EDTA, PENTYLENE GLYCOL, SOPHORA FLAVESCENS\n",
            "ROOT EXTRACT, TREHALOSE, OPUNTIA FICUS-INDICA STEM EXTRACT, OPHIOPOGON\n",
            "JAPONICUS ROOT EXTRACT, HYDROGENATED LECITHIN, BUTYLENE GLYCOL,\n",
            "GLUCOSE, LACTOBACILLUS FERMENT, PARFUM, CERAMIDE NP, ZINGIBER OFFICINALE\n",
            "(GINGER) ROOT EXTRACT, PROPYLENE GLYCOL, SALICYLIC ACID, GENTIANA SCABRA\n",
            "EXTRACT, AMYLOPECTIN, DEXTRIN, FOMES OFFICINALIS (MUSHROOM) EXTRACT,\n",
            "PHENOXYETHANOL, METHYLPARABEN, VIOLA TRICOLOR EXTRACT, SCUTELLARIA\n",
            "BAICALENSIS ROOT EXTRACT, SALIX ALBA (WILLOW) BARK EXTRACT, CERAMIDE\n",
            "NS/CERAMIDE NG, PROPYLPARABEN, GLYCYRRHIZA INFLATA ROOT EXTRACT, ROYAL\n",
            "JELLY EXTRACT, C1 77492\n",
            "FORMULATED IN CANADA\n",
            "SE\n",
            "\f\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Proses pembersihan teks\n",
        "def clean_text(text):\n",
        "    text = text.lower()  # Konversi ke lowercase\n",
        "    text = re.sub(r'\\d+', '', text)  # Hilangkan angka\n",
        "    text = re.sub(r'[^\\w\\s]', '', text)  # Hilangkan tanda baca\n",
        "    return text\n",
        "\n",
        "# Tokenisasi dan padding teks\n",
        "def preprocess_text(text, tokenizer, max_len=100):\n",
        "    text = clean_text(text)  # Bersihkan teks\n",
        "    seq = tokenizer.texts_to_sequences([text])  # Tokenisasi\n",
        "    padded = pad_sequences(seq, maxlen=max_len, padding='post', truncating='post')  # Padding\n",
        "    return padded\n"
      ],
      "metadata": {
        "id": "_ss_7zinRRhn"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qVQFFMoymAA2"
      },
      "source": [
        "### Building Model Tensorflow with LSTM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "wkt6tu3vmAA2"
      },
      "outputs": [],
      "source": [
        "vocab_size = 5000\n",
        "embedding_dim = 32\n",
        "max_length = 50\n",
        "trunc_type='post'\n",
        "padding_type='post'\n",
        "oov_token = \"<OOV>\"\n",
        "training_portion = 0.8"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Dataset Preparation\n",
        "# Assume `datasetAll_df` is a pandas DataFrame with columns: ingredient_name, functions\n",
        "ingredient_texts = datasetAll_df['ingredient_name']\n",
        "ratings = datasetAll_df['rating']\n",
        "functions_texts = datasetAll_df['functions']\n",
        "benefits_word = datasetAll_df['benefits']\n",
        "\n",
        "# Label Encoding for Ratings\n",
        "le = LabelEncoder()\n",
        "ratings_encoded = le.fit_transform(ratings)"
      ],
      "metadata": {
        "id": "U9Iicwe0wPv6"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Pastikan semua nilai di kolom benefits_word adalah string\n",
        "datasetAll_df['benefits'] = datasetAll_df['benefits'].fillna(\"\").astype(str)\n",
        "\n",
        "# Tentukan aturan untuk kategori skincare berdasarkan manfaat yang terdeteksi di kolom 'benefits'\n",
        "def categorize_skincare(benefits_word):\n",
        "    # Menggunakan kondisi untuk menentukan kategori skincare berdasarkan aturan yang Anda sebutkan\n",
        "    benefits_word = benefits_word.lower()  # Convert ke lowercase untuk konsistensi pencocokan\n",
        "\n",
        "    # Aturan berdasarkan manfaat\n",
        "    if \"hydrating\" in benefits_word and \"soothing\" in benefits_word:\n",
        "        return \"For Dry Skin\"\n",
        "    elif \"dark spot fading\" in benefits_word or \"anti-aging\" in benefits_word:\n",
        "        return \"For Mature Skin\"\n",
        "    elif \"soothing\" in benefits_word:\n",
        "        return \"For Sensitive Skin\"\n",
        "    elif \"hydrating\" in benefits_word:\n",
        "        return \"For Normal/Combination Skin\"\n",
        "    elif \"oil control\" in benefits_word:\n",
        "        return \"For Oily Skin\"\n",
        "    else:\n",
        "        return \"Uncategorized\"  # Jika tidak ada kategori yang cocok, berikan kategori 'Uncategorized'\n",
        "\n",
        "# Terapkan aturan untuk setiap baris di kolom 'benefits' untuk membuat kolom 'skincare_category'\n",
        "datasetAll_df['skincare_category'] = datasetAll_df['benefits'].apply(categorize_skincare)\n",
        "\n",
        "# Cek hasilnya\n",
        "print(datasetAll_df[['benefits', 'skincare_category']].head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BsXkddJNV6sb",
        "outputId": "108d3fce-4723-453b-982c-0a718696d1c0"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                        benefits skincare_category\n",
            "0  Anti-Aging, Evens Skin Tone, Dark Spot Fading   For Mature Skin\n",
            "1                           Anti-Aging, Soothing   For Mature Skin\n",
            "2                                     Anti-Aging   For Mature Skin\n",
            "3                                      Hydration     Uncategorized\n",
            "4                                     Anti-Aging   For Mature Skin\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Label Encoding untuk kategori skincare\n",
        "category_labels = datasetAll_df['skincare_category']\n",
        "category_le = LabelEncoder()\n",
        "category_encoded = category_le.fit_transform(category_labels)\n",
        "\n",
        "# Cek hasil Label Encoding\n",
        "print(category_encoded[:10])  # Menampilkan 10 label pertama\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8aBYjgDsXxbk",
        "outputId": "9ed384d0-70da-41cb-8715-852a6c99648c"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 0 0 3 0 2 0 0 0 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.layers import Input, Embedding, LSTM, Dense, Dropout\n",
        "from tensorflow.keras.layers import Concatenate\n",
        "from tensorflow.keras.models import Model\n",
        "\n",
        "# Tokenizer untuk ingredient_texts\n",
        "ingredient_tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)\n",
        "ingredient_tokenizer.fit_on_texts(ingredient_texts)\n",
        "ingredient_sequences = ingredient_tokenizer.texts_to_sequences(ingredient_texts)\n",
        "ingredient_padded = pad_sequences(ingredient_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n",
        "\n",
        "# Tokenizer untuk functions_texts\n",
        "function_tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)\n",
        "function_tokenizer.fit_on_texts(functions_texts)\n",
        "function_sequences = function_tokenizer.texts_to_sequences(functions_texts)\n",
        "function_padded = pad_sequences(function_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n",
        "\n",
        "# Pastikan semua nilai di kolom benefits_word adalah string\n",
        "datasetAll_df['benefits'] = datasetAll_df['benefits'].fillna(\"\").astype(str)\n",
        "\n",
        "# Tokenizer untuk benefits_word\n",
        "benefits_tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)\n",
        "benefits_tokenizer.fit_on_texts(datasetAll_df['benefits'])\n",
        "benefits_sequences = benefits_tokenizer.texts_to_sequences(datasetAll_df['benefits'])\n",
        "benefits_padded = pad_sequences(benefits_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n",
        "\n",
        "# Bangun model untuk memprediksi kategori skincare berdasarkan benefits\n",
        "ingredient_input = Input(shape=(max_length,), name='ingredient_input')\n",
        "ingredient_embedding = Embedding(vocab_size, 64, input_length=max_length)(ingredient_input)\n",
        "ingredient_lstm = LSTM(64)(ingredient_embedding)\n",
        "\n",
        "function_input = Input(shape=(max_length,), name='function_input')\n",
        "function_embedding = Embedding(vocab_size, 64, input_length=max_length)(function_input)\n",
        "function_lstm = LSTM(64)(function_embedding)\n",
        "\n",
        "benefit_input = Input(shape=(max_length,), name='benefit_input')\n",
        "benefit_embedding = Embedding(vocab_size, 64, input_length=max_length)(benefit_input)\n",
        "benefit_lstm = LSTM(64)(benefit_embedding)\n",
        "\n",
        "# Gabungkan representasi dari ketiga input\n",
        "concatenated = Concatenate()([ingredient_lstm, function_lstm, benefit_lstm])\n",
        "\n",
        "# Fully connected layer untuk prediksi\n",
        "dense_1 = Dense(128, activation='relu')(concatenated)\n",
        "output = Dense(len(category_le.classes_), activation='softmax', name='output')(dense_1)\n",
        "\n",
        "# Bangun model\n",
        "model = Model(inputs=[ingredient_input, function_input, benefit_input], outputs=output)\n",
        "\n",
        "# Kompilasi model\n",
        "model.compile(optimizer='adam',\n",
        "              loss='sparse_categorical_crossentropy',  # Untuk klasifikasi multi-kelas\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "# Ringkasan model\n",
        "model.summary()\n"
      ],
      "metadata": {
        "id": "sarFprIXVtCR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 648
        },
        "outputId": "1ffb50ed-bba4-4b52-e862-800b1a648fd5"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"functional\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
              "│ ingredient_input          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ -                      │\n",
              "│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ function_input            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ -                      │\n",
              "│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ benefit_input             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ -                      │\n",
              "│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m64\u001b[0m)         │        \u001b[38;5;34m320,000\u001b[0m │ ingredient_input[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ embedding_1 (\u001b[38;5;33mEmbedding\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m64\u001b[0m)         │        \u001b[38;5;34m320,000\u001b[0m │ function_input[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ embedding_2 (\u001b[38;5;33mEmbedding\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m64\u001b[0m)         │        \u001b[38;5;34m320,000\u001b[0m │ benefit_input[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ lstm (\u001b[38;5;33mLSTM\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m33,024\u001b[0m │ embedding[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ lstm_1 (\u001b[38;5;33mLSTM\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m33,024\u001b[0m │ embedding_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ lstm_2 (\u001b[38;5;33mLSTM\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m33,024\u001b[0m │ embedding_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ concatenate (\u001b[38;5;33mConcatenate\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m192\u001b[0m)            │              \u001b[38;5;34m0\u001b[0m │ lstm[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],            │\n",
              "│                           │                        │                │ lstm_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],          │\n",
              "│                           │                        │                │ lstm_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]           │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ dense (\u001b[38;5;33mDense\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │         \u001b[38;5;34m24,704\u001b[0m │ concatenate[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ output (\u001b[38;5;33mDense\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)              │            \u001b[38;5;34m516\u001b[0m │ dense[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)              </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">        Param # </span>┃<span style=\"font-weight: bold\"> Connected to           </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
              "│ ingredient_input          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ function_input            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ benefit_input             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">320,000</span> │ ingredient_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ embedding_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">320,000</span> │ function_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ embedding_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">320,000</span> │ benefit_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │ embedding[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │ embedding_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ lstm_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │ embedding_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ concatenate (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">192</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lstm[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],            │\n",
              "│                           │                        │                │ lstm_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],          │\n",
              "│                           │                        │                │ lstm_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]           │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">24,704</span> │ concatenate[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ output (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> │ dense[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,084,292\u001b[0m (4.14 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,084,292</span> (4.14 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,084,292\u001b[0m (4.14 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,084,292</span> (4.14 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cek max_length dan rata-rata panjang setiap sequence\n",
        "for name, sequences in [(\"Ingredients\", ingredient_sequences),\n",
        "                         (\"Functions\", function_sequences),\n",
        "                         (\"Benefits\", benefits_sequences)]:\n",
        "    max_len = max(len(seq) for seq in sequences)\n",
        "    avg_len = np.mean([len(seq) for seq in sequences])\n",
        "    print(f\"{name} - Max length: {max_len}, Avg length: {avg_len:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "icpVcBea3RME",
        "outputId": "bc6ced47-eed4-4543-c50a-7d07393e3e61"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingredients - Max length: 12, Avg length: 2.49\n",
            "Functions - Max length: 51, Avg length: 16.74\n",
            "Benefits - Max length: 12, Avg length: 1.48\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Membagi data menjadi training dan validation set\n",
        "X_ingredient = ingredient_padded\n",
        "X_function = function_padded\n",
        "X_benefit = benefits_padded\n",
        "y = category_encoded  # Label kategori skincare\n",
        "\n",
        "X_train_ingredient, X_val_ingredient, X_train_function, X_val_function, X_train_benefit, X_val_benefit, y_train, y_val = train_test_split(\n",
        "    X_ingredient, X_function, X_benefit, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "uP0XHLo-YoE-"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Melatih model dengan data pelatihan\n",
        "history = model.fit(\n",
        "    [X_train_ingredient, X_train_function, X_train_benefit],\n",
        "    y_train,\n",
        "    epochs=10,  # Jumlah epoch dapat disesuaikan\n",
        "    batch_size=32,  # Ukuran batch dapat disesuaikan\n",
        "    validation_data=([X_val_ingredient, X_val_function, X_val_benefit], y_val)\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n6ZDH84bYqvp",
        "outputId": "1d4af546-2b06-4394-feb8-e5994122b0a9"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 54ms/step - accuracy: 0.5482 - loss: 1.0430 - val_accuracy: 0.5839 - val_loss: 0.8869\n",
            "Epoch 2/10\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - accuracy: 0.5913 - loss: 0.9155 - val_accuracy: 0.5839 - val_loss: 0.9018\n",
            "Epoch 3/10\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - accuracy: 0.5768 - loss: 0.9303 - val_accuracy: 0.5839 - val_loss: 0.8866\n",
            "Epoch 4/10\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - accuracy: 0.5845 - loss: 0.9198 - val_accuracy: 0.5839 - val_loss: 0.8904\n",
            "Epoch 5/10\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 19ms/step - accuracy: 0.6024 - loss: 0.8932 - val_accuracy: 0.5839 - val_loss: 0.7671\n",
            "Epoch 6/10\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.7168 - loss: 0.7700 - val_accuracy: 0.7081 - val_loss: 0.7916\n",
            "Epoch 7/10\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 13ms/step - accuracy: 0.7220 - loss: 0.7613 - val_accuracy: 0.6356 - val_loss: 0.7860\n",
            "Epoch 8/10\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - accuracy: 0.7227 - loss: 0.7661 - val_accuracy: 0.7474 - val_loss: 0.7433\n",
            "Epoch 9/10\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.7874 - loss: 0.6870 - val_accuracy: 0.7805 - val_loss: 0.6898\n",
            "Epoch 10/10\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.7854 - loss: 0.6803 - val_accuracy: 0.7598 - val_loss: 0.7274\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluasi model pada data validasi\n",
        "loss, accuracy = model.evaluate([X_val_ingredient, X_val_function, X_val_benefit], y_val)\n",
        "print(f\"Loss: {loss}\")\n",
        "print(f\"Accuracy: {accuracy}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Kfk377jY0nj",
        "outputId": "ddc88e0c-fd7c-4079-aaa1-5bf9df3560e9"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.7812 - loss: 0.6856\n",
            "Loss: 0.7273989319801331\n",
            "Accuracy: 0.759834349155426\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Visualisasi loss dan accuracy\n",
        "plt.figure(figsize=(12, 4))\n",
        "\n",
        "# Loss\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(history.history['loss'], label='Train Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Loss vs Epochs')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "# Accuracy\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Accuracy vs Epochs')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "zX1Kr5reY4te",
        "outputId": "e290af40-0aa6-4386-95a2-91568a80ff47"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menyimpan model ke file .h5\n",
        "model.save('skincare_category_model.h5')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NVM7ugiWZD83",
        "outputId": "1afd3a0f-63a8-4b99-c2c7-606ad7aa369c"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import load_model\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "\n",
        "# Daftar kategori berdasarkan benefits\n",
        "category_rules = {\n",
        "    \"For Dry Skin\": [\"hydrating\", \"soothing\"],\n",
        "    \"For Mature Skin\": [\"dark spot fading\", \"anti-aging\"],\n",
        "    \"For Sensitive Skin\": [\"soothing\"],\n",
        "    \"For Normal Skin/Combinational Skin\": [\"hydrating\"],\n",
        "    \"For Oily Skin\": [\"oil control\"]\n",
        "}\n",
        "\n",
        "# Fungsi untuk ekstrak teks dari gambar menggunakan OCR\n",
        "def extract_text_from_image(image_path):\n",
        "    # Buka gambar\n",
        "    img = Image.open(image_path)\n",
        "    # Ekstrak teks dengan pytesseract\n",
        "    detected_text = pytesseract.image_to_string(img, config=\"--psm 6\")\n",
        "    return detected_text\n",
        "\n",
        "# Fungsi untuk membersihkan teks (optional, jika perlu)\n",
        "def clean_text(text):\n",
        "    text = text.lower()  # Convert ke lowercase\n",
        "    return text\n",
        "\n",
        "# Load model yang sudah disimpan (hanya jika diperlukan)\n",
        "model = load_model('skincare_category_model.h5', compile=False)\n",
        "\n",
        "# Misalnya gambar yang diterima untuk OCR\n",
        "image_path = '/content/image_ocr/skintific.jpg'  # Ganti dengan path gambar yang sesuai\n",
        "\n",
        "# Ekstrak teks dari gambar menggunakan OCR\n",
        "detected_text = extract_text_from_image(image_path)\n",
        "detected_tokens = detected_text.lower().split()\n",
        "\n",
        "# Tokenizer dan padding untuk input data\n",
        "ingredients = detected_tokens  # Menggunakan teks yang terdeteksi sebagai ingredients\n",
        "ingredient_tokenizer = Tokenizer(num_words=1000, oov_token=\"<OOV>\")\n",
        "ingredient_tokenizer.fit_on_texts(ingredients)\n",
        "\n",
        "# Tentukan aturan untuk kategori skincare berdasarkan manfaat yang terdeteksi\n",
        "matched_ingredients = [token for token in detected_tokens if token in ingredient_tokenizer.word_index]\n",
        "\n",
        "# LabelEncoder untuk rating\n",
        "le = LabelEncoder()\n",
        "ratings = [\"BEST\", \"GOOD\", \"AVERAGE\", \"BAD\", \"WORST\"]\n",
        "le.fit(ratings)\n",
        "\n",
        "# Fungsi untuk mengambil rating dari dataset\n",
        "ingredient_functions = {}\n",
        "ingredient_ratings = {}\n",
        "benefit_matches = []\n",
        "\n",
        "for ingredient in matched_ingredients:\n",
        "    # Dapatkan data terkait ingredient dari dataset\n",
        "    matched_rows = datasetAll_df[datasetAll_df['ingredient_name'].str.contains(ingredient, case=False, na=False)]\n",
        "    if not matched_rows.empty:\n",
        "        # Ambil deskripsi fungsi, benefits, dan rating dari dataset\n",
        "        function_text = matched_rows['functions'].iloc[0]\n",
        "        benefit_text = matched_rows['benefits'].iloc[0]\n",
        "        ingredient_rating = matched_rows['rating'].iloc[0]  # Ambil rating langsung dari dataset\n",
        "\n",
        "        # Simpan fungsi, rating, dan benefits\n",
        "        ingredient_functions[ingredient] = function_text\n",
        "        ingredient_ratings[ingredient] = ingredient_rating\n",
        "        benefit_matches.append(benefit_text.lower())\n",
        "\n",
        "# Analisis kategori berdasarkan manfaat (benefits)\n",
        "category_predictions = []\n",
        "\n",
        "for category, rules in category_rules.items():\n",
        "    if all(rule in \" \".join(benefit_matches) for rule in rules):\n",
        "        category_predictions.append(category)\n",
        "\n",
        "# Tampilkan hasil\n",
        "if ingredient_functions:\n",
        "    print(\"Detected Ingredients, Their Functions, and Ratings from Dataset:\\n\")\n",
        "    for ingredient in ingredient_functions:\n",
        "        print(f\"• Ingredient: {ingredient}\")\n",
        "        print(f\"  Function: {ingredient_functions[ingredient]}\")\n",
        "        print(f\"  Rating: {ingredient_ratings[ingredient]}\")\n",
        "        print(\"-\" * 50)  # Separator for clarity\n",
        "\n",
        "    if category_predictions:\n",
        "        print(\"\\nPredicted Skincare Categories Based on Benefits:\\n\")\n",
        "        for category in category_predictions:\n",
        "            print(f\"• {category}\")\n",
        "    else:\n",
        "        print(\"\\nNo matching category found based on benefits.\")\n",
        "else:\n",
        "    print(\"No matching ingredients found in the dataset.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B6DVxMKQeuTW",
        "outputId": "c2d2b314-a632-4752-b936-bac69005f010"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Detected Ingredients, Their Functions, and Ratings from Dataset:\n",
            "\n",
            "• Ingredient: v\n",
            "  Function: Indicates an ingredient is regulated and approved to perform a specific skin care function.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: 4\n",
            "  Function: Trade name Matrixyl, a fatty acid mixed with amino acids.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: j\n",
            "  Function: Juice expressed from the leaves of the aloe plant. Commonly used in skin care formulations for its soothing and hydration benefits.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: p\n",
            "  Function: A lab-made skin-firming peptide formed from a reaction between acetic acid, cetyl alcohol, and dipeptide-1, which contains the amino acids arginine and tyrosine.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: a\n",
            "  Function: This potent antioxidant is a highly stable form of vitamin C that improves skin tone, helps fade discolorations, and visibly firms skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: ae\n",
            "  Function: Algae are very simple, chlorophyll-containing organisms.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: d\n",
            "  Function: This potent antioxidant is a highly stable form of vitamin C that improves skin tone, helps fade discolorations, and visibly firms skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: rae\n",
            "  Function: Skin-calming antioxidant. Can also help temper excessively oily skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: if\n",
            "  Function: Probiotic-derived ingredient that strengthens skin's microbiome, encouraging skin to repair itself, which helps it look younger.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: i\n",
            "  Function: This potent antioxidant is a highly stable form of vitamin C that improves skin tone, helps fade discolorations, and visibly firms skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: iv\n",
            "  Function: Indicates an ingredient is regulated and approved to perform a specific skin care function.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: w\n",
            "  Function: Actinidia chinensis (kiwi) fruit extract is an excellent source of antioxidants, including vitamin C.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: ie\n",
            "  Function: Indicates an ingredient is regulated and approved to perform a specific skin care function.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: arti\n",
            "  Function: A rich source of the medium chain triglyceride lauric acid, which comprises over 50% of the fatty acids found in this plants oil.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: aia\n",
            "  Function: Powerful antioxidant that stands out for its ability to help defend skin against daily environmental stressors and mitigate visible effects of UV exposure. Can be naturally or synthetically derived.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: sie\n",
            "  Function: Chinese herb (also known as St. Paul's wort) for which there is no research showing that it has any benefit for skin.\n",
            "  Rating: AVERAGE\n",
            "--------------------------------------------------\n",
            "• Ingredient: een\n",
            "  Function: A soothing source of antioxidants, including vitamin E. As an non-fragrant plant oil, it also has emollient properties for skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: az\n",
            "  Function: This plant's extract form has antioxidant and skin-calming benefits and may also help reduce the population of harmful microbes on skin’s surface.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: cy\n",
            "  Function: Combination of two top skin soothers, allantoin and licorice-derived glycyrrhetinic acid, that also provides antioxidant benefit.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: nn\n",
            "  Function: Ahnfeltiopsis concinna extract is a type of red algae with calming and hydrating properties for skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: ethylhexyl\n",
            "  Function: Synthetic broad-spectrum sunscreen agent that helps defend skin against UVA and UVB rays; praised for excellent photostability.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: cl\n",
            "  Function: Functions as an antioxidant.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: magnesium\n",
            "  Function: Stable, hydrating form of vitamin C known to brighten dullness and improve skin's firm look and feel.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: glyceryl\n",
            "  Function: A synthetic ingredient used in skin care products to enhance texture and provide emollient properties.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: xanthan\n",
            "  Function: This naturally derived ingredient is produced from the fermentation of simple sugars, and acts as a thickening agent, texture enhancer, and emulsion stabilizer in cosmetics.\n",
            "  Rating: GOOD\n",
            "--------------------------------------------------\n",
            "• Ingredient: cetearyl\n",
            "  Function: Beneficial skin softening ingredient for skin (completely different from damaging/drying forms of alcohol). Also influences the foaming effects of a cleanser.\n",
            "  Rating: GOOD\n",
            "--------------------------------------------------\n",
            "• Ingredient: chlo\n",
            "  Function: Algae-derived antioxidant withs soothing/hydrating properties for skin + anti-aging benefits.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: 3\n",
            "  Function: This potent antioxidant is a highly stable form of vitamin C that improves skin tone, helps fade discolorations, and visibly firms skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: centella\n",
            "  Function: This star ingredient of South Korean cica creams is a rich source of antioxidant and amino acids. It’s well known for its soothing properties.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: asiatica\n",
            "  Function: This star ingredient of South Korean cica creams is a rich source of antioxidant and amino acids. It’s well known for its soothing properties.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: ceramide\n",
            "  Function: Replenishing ingredient that supports skin’s barrier strength, suppleness, and hydration levels.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: sodium\n",
            "  Function: This hydrolyzed form of sodium hyaluronate is used in skin care as a humectant.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: vulgaris\n",
            "  Function: Extract from the common bamboo plant.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: disodium\n",
            "  Function: This conditioning ingredient is said to work by supporting glycosaminoglycans within skin.\n",
            "  Rating: GOOD\n",
            "--------------------------------------------------\n",
            "• Ingredient: pentylene\n",
            "  Function: This water-binding ingredient works well in cosmetics as a hydrating ingredient, solvent, and texture enhancer. It has been deemed safe for use in skin care products.\n",
            "  Rating: GOOD\n",
            "--------------------------------------------------\n",
            "• Ingredient: sophora\n",
            "  Function: This root extract’s antioxidant properties  might be able to fight the causes of dark spots and discolorations.\n",
            "  Rating: GOOD\n",
            "--------------------------------------------------\n",
            "• Ingredient: root\n",
            "  Function: This soothing plant also helps visibly repair damaged skin and provides light emollient properties.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: opuntia\n",
            "  Function: A type of cactus also known as prickly pear whose stem is a bountiful source of antioxidant compounds known as polyphenols.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: stem\n",
            "  Function: Stem portion of a large woody vine with flowering leaves. Named chocolate vine due to its scent, the stem has antioxidant properties for skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: ophiopogon\n",
            "  Function: The root of this plant contains several beneficial compounds that have antioxidant, soothing, and redness-reducing properties.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: japonicus\n",
            "  Function: The root of this plant contains several beneficial compounds that have antioxidant, soothing, and redness-reducing properties.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: hydrogenated\n",
            "  Function: Plays many different roles including dispersing agent, skin-conditioning emollient, and emulsifying agent. Enhances the penetration of other ingredients for greater efficacy.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: butylene\n",
            "  Function: Humectant (hydration booster), texture/penetration enhancer, and formulary solvent. May also help decrease rough surface skin and stabilize the formula.\n",
            "  Rating: GOOD\n",
            "--------------------------------------------------\n",
            "• Ingredient: lactobacillus\n",
            "  Function: This ingredient is the filtered result of combining the skin-friendly lactobacillus bacteria with the milky liquid found inside coconuts. It helps restore skin's microbiome and soften and condition skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: zingiber\n",
            "  Function: The extract form of this plant, also known as ginger, is generally considered non-volatile (non-irritating) while the oil form contains over 50 such components with potential to aggravate skin.\n",
            "  Rating: AVERAGE\n",
            "--------------------------------------------------\n",
            "• Ingredient: officinale\n",
            "  Function: Research indicates that this extract can have antioxidant activity, although that information is limited.\n",
            "  Rating: GOOD\n",
            "--------------------------------------------------\n",
            "• Ingredient: propylene\n",
            "  Function: A synthetic texturizer, slip agent, and solvent. It is a byproduct of propylene glycol and has been ruled safe as used in cosmetics.\n",
            "  Rating: GOOD\n",
            "--------------------------------------------------\n",
            "• Ingredient: salicylic\n",
            "  Function: Capryloyl salicylic acid is a derivative (ester) of salicylic acid developed by L'Oreal.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: gentiana\n",
            "  Function: Part of the gentian plant, constituents of which are soothing to skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: officinalis\n",
            "  Function: Latin name for the marshmallow plant.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: viola\n",
            "  Function: Plant extract for which there is a small amount of research showing it has skin soothing and antioxidant properties.\n",
            "  Rating: AVERAGE\n",
            "--------------------------------------------------\n",
            "• Ingredient: tricolor\n",
            "  Function: Plant extract for which there is a small amount of research showing it has skin soothing and antioxidant properties.\n",
            "  Rating: AVERAGE\n",
            "--------------------------------------------------\n",
            "• Ingredient: scutellaria\n",
            "  Function: Scutellaria baicalensis root extract comes from a flowering plant native to China.\n",
            "  Rating: GOOD\n",
            "--------------------------------------------------\n",
            "• Ingredient: baicalensis\n",
            "  Function: Scutellaria baicalensis root extract comes from a flowering plant native to China.\n",
            "  Rating: GOOD\n",
            "--------------------------------------------------\n",
            "• Ingredient: salix\n",
            "  Function: Plant extract that offers proven skin-soothing, antioxidant benefits.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: alba\n",
            "  Function: Also known as Northern Truffle, this wild mushroom is proving to be very helpful for soothing reddened, sensitized skin.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: bark\n",
            "  Function: Plant extract whose various parts have notable antioxidant, soothing, and skin-protecting properties.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: glycyrrhiza\n",
            "  Function: A component of licorice, this ingredient has soothing and dark spot fading properties when applied topically.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: royal\n",
            "  Function: The myriad claims about royal jelly are anecdotal and have no research to substantiate them.\n",
            "  Rating: AVERAGE\n",
            "--------------------------------------------------\n",
            "• Ingredient: jelly\n",
            "  Function: The myriad claims about royal jelly are anecdotal and have no research to substantiate them.\n",
            "  Rating: AVERAGE\n",
            "--------------------------------------------------\n",
            "• Ingredient: c1\n",
            "  Function: A complex mixture of fatty acids from lanolin and cholesterol that conditions skin and helps create thicker textures in cosmetics.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: in\n",
            "  Function: Functions as an antioxidant.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "• Ingredient: se\n",
            "  Function: Plant extract from the baobab tree, rich in skin-nourishing amino acids and fatty acids, as well as phenolic and flavonoid compounds that exhibit strong antioxidant benefits.\n",
            "  Rating: BEST\n",
            "--------------------------------------------------\n",
            "\n",
            "Predicted Skincare Categories Based on Benefits:\n",
            "\n",
            "• For Mature Skin\n",
            "• For Sensitive Skin\n",
            "• For Oily Skin\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.7"
    },
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}